import {
  require_inspect
} from "./chunk-J2SQABZG.js";
import {
  __commonJS,
  __esm,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// ../../node_modules/ts-invariant/node_modules/tslib/tslib.es6.js
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var extendStatics;
var init_tslib_es6 = __esm({
  "../../node_modules/ts-invariant/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
  }
});

// ../../node_modules/ts-invariant/lib/invariant.esm.js
function invariant(condition, message) {
  if (!condition) {
    throw new InvariantError(message);
  }
}
function wrapConsoleMethod(method) {
  return function() {
    return console[method].apply(console, arguments);
  };
}
var genericMessage, _a, setPrototypeOf, InvariantError, processStub;
var init_invariant_esm = __esm({
  "../../node_modules/ts-invariant/lib/invariant.esm.js"() {
    init_tslib_es6();
    genericMessage = "Invariant Violation";
    _a = Object.setPrototypeOf;
    setPrototypeOf = _a === void 0 ? function(obj, proto) {
      obj.__proto__ = proto;
      return obj;
    } : _a;
    InvariantError = function(_super) {
      __extends(InvariantError2, _super);
      function InvariantError2(message) {
        if (message === void 0) {
          message = genericMessage;
        }
        var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
        _this.framesToPop = 1;
        _this.name = genericMessage;
        setPrototypeOf(_this, InvariantError2.prototype);
        return _this;
      }
      return InvariantError2;
    }(Error);
    (function(invariant2) {
      invariant2.warn = wrapConsoleMethod("warn");
      invariant2.error = wrapConsoleMethod("error");
    })(invariant || (invariant = {}));
    processStub = { env: {} };
    if (typeof process === "object") {
      processStub = process;
    } else
      try {
        Function("stub", "process = stub")(processStub);
      } catch (atLeastWeTried) {
      }
  }
});

// ../../node_modules/@wry/equality/lib/equality.esm.js
function equal(a, b) {
  try {
    return check(a, b);
  } finally {
    previousComparisons.clear();
  }
}
function check(a, b) {
  if (a === b) {
    return true;
  }
  var aTag = toString.call(a);
  var bTag = toString.call(b);
  if (aTag !== bTag) {
    return false;
  }
  switch (aTag) {
    case "[object Array]":
      if (a.length !== b.length)
        return false;
    case "[object Object]": {
      if (previouslyCompared(a, b))
        return true;
      var aKeys = Object.keys(a);
      var bKeys = Object.keys(b);
      var keyCount = aKeys.length;
      if (keyCount !== bKeys.length)
        return false;
      for (var k = 0; k < keyCount; ++k) {
        if (!hasOwnProperty.call(b, aKeys[k])) {
          return false;
        }
      }
      for (var k = 0; k < keyCount; ++k) {
        var key = aKeys[k];
        if (!check(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    case "[object Error]":
      return a.name === b.name && a.message === b.message;
    case "[object Number]":
      if (a !== a)
        return b !== b;
    case "[object Boolean]":
    case "[object Date]":
      return +a === +b;
    case "[object RegExp]":
    case "[object String]":
      return a == "" + b;
    case "[object Map]":
    case "[object Set]": {
      if (a.size !== b.size)
        return false;
      if (previouslyCompared(a, b))
        return true;
      var aIterator = a.entries();
      var isMap = aTag === "[object Map]";
      while (true) {
        var info = aIterator.next();
        if (info.done)
          break;
        var _a3 = info.value, aKey = _a3[0], aValue = _a3[1];
        if (!b.has(aKey)) {
          return false;
        }
        if (isMap && !check(aValue, b.get(aKey))) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}
function previouslyCompared(a, b) {
  var bSet = previousComparisons.get(a);
  if (bSet) {
    if (bSet.has(b))
      return true;
  } else {
    previousComparisons.set(a, bSet = /* @__PURE__ */ new Set());
  }
  bSet.add(b);
  return false;
}
var _a2, toString, hasOwnProperty, previousComparisons;
var init_equality_esm = __esm({
  "../../node_modules/@wry/equality/lib/equality.esm.js"() {
    _a2 = Object.prototype;
    toString = _a2.toString;
    hasOwnProperty = _a2.hasOwnProperty;
    previousComparisons = /* @__PURE__ */ new Map();
  }
});

// ../../node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "../../node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable3;
    }
    function isObservable(x) {
      return x instanceof Observable3;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m)
              m.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m)
              m.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m)
              m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable3 = function() {
      function Observable4(subscriber) {
        _classCallCheck(this, Observable4);
        if (!(this instanceof Observable4))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass(Observable4, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat2() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v) {
                  observer.next(v);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }
                var inner = C.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0)
                      subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from2(x) {
          var C = typeof this === "function" ? this : Observable4;
          if (x == null)
            throw new TypeError(x + " is not an object");
          var method = getMethod(x, SymbolObservable);
          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C)
              return observable;
            return new C(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol("iterator")) {
            method = getMethod(x, SymbolIterator);
            if (method) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x)) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C = typeof this === "function" ? this : Observable4;
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable4;
    }();
    exports.Observable = Observable3;
    if (hasSymbols()) {
      Object.defineProperty(Observable3, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// ../../node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "../../node_modules/zen-observable/index.js"(exports, module2) {
    module2.exports = require_Observable().Observable;
  }
});

// ../../node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable, Observable, bundle_esm_default;
var init_bundle_esm = __esm({
  "../../node_modules/zen-observable-ts/lib/bundle.esm.js"() {
    import_zen_observable = __toESM(require_zen_observable());
    Observable = import_zen_observable.default;
    bundle_esm_default = Observable;
  }
});

// ../../node_modules/apollo-link/node_modules/tslib/tslib.es6.js
function __extends2(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var extendStatics2, __assign;
var init_tslib_es62 = __esm({
  "../../node_modules/apollo-link/node_modules/tslib/tslib.es6.js"() {
    extendStatics2 = function(d, b) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics2(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign4(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// ../../node_modules/graphql/language/visitor.mjs
function visit(root2, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
  var stack = void 0;
  var inArray = Array.isArray(root2);
  var keys = [root2];
  var index = -1;
  var edits = [];
  var node = void 0;
  var key = void 0;
  var parent = void 0;
  var path = [];
  var ancestors = [];
  var newRoot = root2;
  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};
          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k = _Object$keys2[_i2];
            clone[k] = node[k];
          }
          node = clone;
        }
        var editOffset = 0;
        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];
          if (inArray) {
            editKey -= editOffset;
          }
          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : void 0;
      node = parent ? parent[key] : newRoot;
      if (node === null || node === void 0) {
        continue;
      }
      if (parent) {
        path.push(key);
      }
    }
    var result2 = void 0;
    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error("Invalid AST Node: " + (0, import_inspect.default)(node));
      }
      var visitFn = getVisitFn(visitor, node.kind, isLeaving);
      if (visitFn) {
        result2 = visitFn.call(visitor, node, key, parent, path, ancestors);
        if (result2 === BREAK) {
          break;
        }
        if (result2 === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result2 !== void 0) {
          edits.push([key, result2]);
          if (!isLeaving) {
            if (isNode(result2)) {
              node = result2;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }
    if (result2 === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : visitorKeys[node.kind] || [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }
  return newRoot;
}
function isNode(maybeNode) {
  return Boolean(maybeNode && typeof maybeNode.kind === "string");
}
function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];
  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === "function") {
      return kindVisitor;
    }
    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
    if (typeof kindSpecificVisitor === "function") {
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
    if (specificVisitor) {
      if (typeof specificVisitor === "function") {
        return specificVisitor;
      }
      var specificKindVisitor = specificVisitor[kind];
      if (typeof specificKindVisitor === "function") {
        return specificKindVisitor;
      }
    }
  }
}
var import_inspect, QueryDocumentKeys, BREAK;
var init_visitor = __esm({
  "../../node_modules/graphql/language/visitor.mjs"() {
    import_inspect = __toESM(require_inspect(), 1);
    QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
      InterfaceTypeDefinition: ["description", "name", "directives", "fields"],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    BREAK = Object.freeze({});
  }
});

// ../../node_modules/apollo-utilities/node_modules/tslib/tslib.es6.js
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
var __assign2;
var init_tslib_es63 = __esm({
  "../../node_modules/apollo-utilities/node_modules/tslib/tslib.es6.js"() {
    __assign2 = function() {
      __assign2 = Object.assign || function __assign4(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

// ../../node_modules/fast-json-stable-stringify/index.js
var require_fast_json_stable_stringify = __commonJS({
  "../../node_modules/fast-json-stable-stringify/index.js"(exports, module2) {
    "use strict";
    module2.exports = function(data, opts) {
      if (!opts)
        opts = {};
      if (typeof opts === "function")
        opts = { cmp: opts };
      var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
      var cmp = opts.cmp && function(f) {
        return function(node) {
          return function(a, b) {
            var aobj = { key: a, value: node[a] };
            var bobj = { key: b, value: node[b] };
            return f(aobj, bobj);
          };
        };
      }(opts.cmp);
      var seen = [];
      return function stringify2(node) {
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        if (node === void 0)
          return;
        if (typeof node == "number")
          return isFinite(node) ? "" + node : "null";
        if (typeof node !== "object")
          return JSON.stringify(node);
        var i, out;
        if (Array.isArray(node)) {
          out = "[";
          for (i = 0; i < node.length; i++) {
            if (i)
              out += ",";
            out += stringify2(node[i]) || "null";
          }
          return out + "]";
        }
        if (node === null)
          return "null";
        if (seen.indexOf(node) !== -1) {
          if (cycles)
            return JSON.stringify("__cycle__");
          throw new TypeError("Converting circular structure to JSON");
        }
        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = "";
        for (i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = stringify2(node[key]);
          if (!value)
            continue;
          if (out)
            out += ",";
          out += JSON.stringify(key) + ":" + value;
        }
        seen.splice(seenIndex, 1);
        return "{" + out + "}";
      }(data);
    };
  }
});

// ../../node_modules/apollo-utilities/lib/bundle.esm.js
function isStringValue(value) {
  return value.kind === "StringValue";
}
function isBooleanValue(value) {
  return value.kind === "BooleanValue";
}
function isIntValue(value) {
  return value.kind === "IntValue";
}
function isFloatValue(value) {
  return value.kind === "FloatValue";
}
function isVariable(value) {
  return value.kind === "Variable";
}
function isObjectValue(value) {
  return value.kind === "ObjectValue";
}
function isListValue(value) {
  return value.kind === "ListValue";
}
function isEnumValue(value) {
  return value.kind === "EnumValue";
}
function isNullValue(value) {
  return value.kind === "NullValue";
}
function valueToObjectRepresentation(argObj, name, value, variables) {
  if (isIntValue(value) || isFloatValue(value)) {
    argObj[name.value] = Number(value.value);
  } else if (isBooleanValue(value) || isStringValue(value)) {
    argObj[name.value] = value.value;
  } else if (isObjectValue(value)) {
    var nestedArgObj_1 = {};
    value.fields.map(function(obj) {
      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
    });
    argObj[name.value] = nestedArgObj_1;
  } else if (isVariable(value)) {
    var variableValue = (variables || {})[value.name.value];
    argObj[name.value] = variableValue;
  } else if (isListValue(value)) {
    argObj[name.value] = value.values.map(function(listValue) {
      var nestedArgArrayObj = {};
      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
      return nestedArgArrayObj[name.value];
    });
  } else if (isEnumValue(value)) {
    argObj[name.value] = value.value;
  } else if (isNullValue(value)) {
    argObj[name.value] = null;
  } else {
    throw false ? new InvariantError(17) : new InvariantError('The inline argument "' + name.value + '" of kind "' + value.kind + '"is not supported. Use variables instead of inline arguments to overcome this limitation.');
  }
}
function storeKeyNameFromField(field, variables) {
  var directivesObj = null;
  if (field.directives) {
    directivesObj = {};
    field.directives.forEach(function(directive) {
      directivesObj[directive.name.value] = {};
      if (directive.arguments) {
        directive.arguments.forEach(function(_a3) {
          var name = _a3.name, value = _a3.value;
          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
        });
      }
    });
  }
  var argObj = null;
  if (field.arguments && field.arguments.length) {
    argObj = {};
    field.arguments.forEach(function(_a3) {
      var name = _a3.name, value = _a3.value;
      return valueToObjectRepresentation(argObj, name, value, variables);
    });
  }
  return getStoreKeyName(field.name.value, argObj, directivesObj);
}
function getStoreKeyName(fieldName, args, directives) {
  if (directives && directives["connection"] && directives["connection"]["key"]) {
    if (directives["connection"]["filter"] && directives["connection"]["filter"].length > 0) {
      var filterKeys = directives["connection"]["filter"] ? directives["connection"]["filter"] : [];
      filterKeys.sort();
      var queryArgs_1 = args;
      var filteredArgs_1 = {};
      filterKeys.forEach(function(key) {
        filteredArgs_1[key] = queryArgs_1[key];
      });
      return directives["connection"]["key"] + "(" + JSON.stringify(filteredArgs_1) + ")";
    } else {
      return directives["connection"]["key"];
    }
  }
  var completeFieldName = fieldName;
  if (args) {
    var stringifiedArgs = (0, import_fast_json_stable_stringify.default)(args);
    completeFieldName += "(" + stringifiedArgs + ")";
  }
  if (directives) {
    Object.keys(directives).forEach(function(key) {
      if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
        return;
      if (directives[key] && Object.keys(directives[key]).length) {
        completeFieldName += "@" + key + "(" + JSON.stringify(directives[key]) + ")";
      } else {
        completeFieldName += "@" + key;
      }
    });
  }
  return completeFieldName;
}
function argumentsObjectFromField(field, variables) {
  if (field.arguments && field.arguments.length) {
    var argObj_1 = {};
    field.arguments.forEach(function(_a3) {
      var name = _a3.name, value = _a3.value;
      return valueToObjectRepresentation(argObj_1, name, value, variables);
    });
    return argObj_1;
  }
  return null;
}
function resultKeyNameFromField(field) {
  return field.alias ? field.alias.value : field.name.value;
}
function isField(selection) {
  return selection.kind === "Field";
}
function isInlineFragment(selection) {
  return selection.kind === "InlineFragment";
}
function isIdValue(idObject) {
  return idObject && idObject.type === "id" && typeof idObject.generated === "boolean";
}
function toIdValue(idConfig, generated) {
  if (generated === void 0) {
    generated = false;
  }
  return __assign2({ type: "id", generated }, typeof idConfig === "string" ? { id: idConfig, typename: void 0 } : idConfig);
}
function isJsonValue(jsonObject) {
  return jsonObject != null && typeof jsonObject === "object" && jsonObject.type === "json";
}
function getDirectiveInfoFromField(field, variables) {
  if (field.directives && field.directives.length) {
    var directiveObj_1 = {};
    field.directives.forEach(function(directive) {
      directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);
    });
    return directiveObj_1;
  }
  return null;
}
function shouldInclude(selection, variables) {
  if (variables === void 0) {
    variables = {};
  }
  return getInclusionDirectives(selection.directives).every(function(_a3) {
    var directive = _a3.directive, ifArgument = _a3.ifArgument;
    var evaledValue = false;
    if (ifArgument.value.kind === "Variable") {
      evaledValue = variables[ifArgument.value.name.value];
      false ? invariant(evaledValue !== void 0, 13) : invariant(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.");
    } else {
      evaledValue = ifArgument.value.value;
    }
    return directive.name.value === "skip" ? !evaledValue : evaledValue;
  });
}
function getDirectiveNames(doc) {
  var names = [];
  visit(doc, {
    Directive: function(node) {
      names.push(node.name.value);
    }
  });
  return names;
}
function hasDirectives(names, doc) {
  return getDirectiveNames(doc).some(function(name) {
    return names.indexOf(name) > -1;
  });
}
function hasClientExports(document) {
  return document && hasDirectives(["client"], document) && hasDirectives(["export"], document);
}
function isInclusionDirective(_a3) {
  var value = _a3.name.value;
  return value === "skip" || value === "include";
}
function getInclusionDirectives(directives) {
  return directives ? directives.filter(isInclusionDirective).map(function(directive) {
    var directiveArguments = directive.arguments;
    var directiveName = directive.name.value;
    false ? invariant(directiveArguments && directiveArguments.length === 1, 14) : invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.");
    var ifArgument = directiveArguments[0];
    false ? invariant(ifArgument.name && ifArgument.name.value === "if", 15) : invariant(ifArgument.name && ifArgument.name.value === "if", "Invalid argument for the @" + directiveName + " directive.");
    var ifValue = ifArgument.value;
    false ? invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), 16) : invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
    return { directive, ifArgument };
  }) : [];
}
function getFragmentQueryDocument(document, fragmentName) {
  var actualFragmentName = fragmentName;
  var fragments = [];
  document.definitions.forEach(function(definition) {
    if (definition.kind === "OperationDefinition") {
      throw false ? new InvariantError(11) : new InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : "") + ". No operations are allowed when using a fragment as a query. Only fragments are allowed.");
    }
    if (definition.kind === "FragmentDefinition") {
      fragments.push(definition);
    }
  });
  if (typeof actualFragmentName === "undefined") {
    false ? invariant(fragments.length === 1, 12) : invariant(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
    actualFragmentName = fragments[0].name.value;
  }
  var query = __assign2(__assign2({}, document), { definitions: __spreadArrays([
    {
      kind: "OperationDefinition",
      operation: "query",
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "FragmentSpread",
            name: {
              kind: "Name",
              value: actualFragmentName
            }
          }
        ]
      }
    }
  ], document.definitions) });
  return query;
}
function assign(target) {
  var sources = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    sources[_i - 1] = arguments[_i];
  }
  sources.forEach(function(source) {
    if (typeof source === "undefined" || source === null) {
      return;
    }
    Object.keys(source).forEach(function(key) {
      target[key] = source[key];
    });
  });
  return target;
}
function checkDocument(doc) {
  false ? invariant(doc && doc.kind === "Document", 2) : invariant(doc && doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
  var operations = doc.definitions.filter(function(d) {
    return d.kind !== "FragmentDefinition";
  }).map(function(definition) {
    if (definition.kind !== "OperationDefinition") {
      throw false ? new InvariantError(3) : new InvariantError('Schema type definitions not allowed in queries. Found: "' + definition.kind + '"');
    }
    return definition;
  });
  false ? invariant(operations.length <= 1, 4) : invariant(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations");
  return doc;
}
function getOperationDefinition(doc) {
  checkDocument(doc);
  return doc.definitions.filter(function(definition) {
    return definition.kind === "OperationDefinition";
  })[0];
}
function getOperationName(doc) {
  return doc.definitions.filter(function(definition) {
    return definition.kind === "OperationDefinition" && definition.name;
  }).map(function(x) {
    return x.name.value;
  })[0] || null;
}
function getFragmentDefinitions(doc) {
  return doc.definitions.filter(function(definition) {
    return definition.kind === "FragmentDefinition";
  });
}
function getQueryDefinition(doc) {
  var queryDef = getOperationDefinition(doc);
  false ? invariant(queryDef && queryDef.operation === "query", 6) : invariant(queryDef && queryDef.operation === "query", "Must contain a query definition.");
  return queryDef;
}
function getFragmentDefinition(doc) {
  false ? invariant(doc.kind === "Document", 7) : invariant(doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
  false ? invariant(doc.definitions.length <= 1, 8) : invariant(doc.definitions.length <= 1, "Fragment must have exactly one definition.");
  var fragmentDef = doc.definitions[0];
  false ? invariant(fragmentDef.kind === "FragmentDefinition", 9) : invariant(fragmentDef.kind === "FragmentDefinition", "Must be a fragment definition.");
  return fragmentDef;
}
function getMainDefinition(queryDoc) {
  checkDocument(queryDoc);
  var fragmentDefinition;
  for (var _i = 0, _a3 = queryDoc.definitions; _i < _a3.length; _i++) {
    var definition = _a3[_i];
    if (definition.kind === "OperationDefinition") {
      var operation = definition.operation;
      if (operation === "query" || operation === "mutation" || operation === "subscription") {
        return definition;
      }
    }
    if (definition.kind === "FragmentDefinition" && !fragmentDefinition) {
      fragmentDefinition = definition;
    }
  }
  if (fragmentDefinition) {
    return fragmentDefinition;
  }
  throw false ? new InvariantError(10) : new InvariantError("Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.");
}
function createFragmentMap(fragments) {
  if (fragments === void 0) {
    fragments = [];
  }
  var symTable = {};
  fragments.forEach(function(fragment) {
    symTable[fragment.name.value] = fragment;
  });
  return symTable;
}
function getDefaultValues(definition) {
  if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {
    var defaultValues = definition.variableDefinitions.filter(function(_a3) {
      var defaultValue = _a3.defaultValue;
      return defaultValue;
    }).map(function(_a3) {
      var variable = _a3.variable, defaultValue = _a3.defaultValue;
      var defaultValueObj = {};
      valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);
      return defaultValueObj;
    });
    return assign.apply(void 0, __spreadArrays([{}], defaultValues));
  }
  return {};
}
function filterInPlace(array, test, context) {
  var target = 0;
  array.forEach(function(elem, i) {
    if (test.call(this, elem, i, array)) {
      array[target++] = elem;
    }
  }, context);
  array.length = target;
  return array;
}
function isEmpty(op, fragments) {
  return op.selectionSet.selections.every(function(selection) {
    return selection.kind === "FragmentSpread" && isEmpty(fragments[selection.name.value], fragments);
  });
}
function nullIfDocIsEmpty(doc) {
  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;
}
function getDirectiveMatcher(directives) {
  return function directiveMatcher(directive) {
    return directives.some(function(dir) {
      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
    });
  };
}
function removeDirectivesFromDocument(directives, doc) {
  var variablesInUse = /* @__PURE__ */ Object.create(null);
  var variablesToRemove = [];
  var fragmentSpreadsInUse = /* @__PURE__ */ Object.create(null);
  var fragmentSpreadsToRemove = [];
  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {
    Variable: {
      enter: function(node, _key, parent) {
        if (parent.kind !== "VariableDefinition") {
          variablesInUse[node.name.value] = true;
        }
      }
    },
    Field: {
      enter: function(node) {
        if (directives && node.directives) {
          var shouldRemoveField = directives.some(function(directive) {
            return directive.remove;
          });
          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {
            if (node.arguments) {
              node.arguments.forEach(function(arg) {
                if (arg.value.kind === "Variable") {
                  variablesToRemove.push({
                    name: arg.value.name.value
                  });
                }
              });
            }
            if (node.selectionSet) {
              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function(frag) {
                fragmentSpreadsToRemove.push({
                  name: frag.name.value
                });
              });
            }
            return null;
          }
        }
      }
    },
    FragmentSpread: {
      enter: function(node) {
        fragmentSpreadsInUse[node.name.value] = true;
      }
    },
    Directive: {
      enter: function(node) {
        if (getDirectiveMatcher(directives)(node)) {
          return null;
        }
      }
    }
  }));
  if (modifiedDoc && filterInPlace(variablesToRemove, function(v) {
    return !variablesInUse[v.name];
  }).length) {
    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
  }
  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function(fs) {
    return !fragmentSpreadsInUse[fs.name];
  }).length) {
    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
  }
  return modifiedDoc;
}
function addTypenameToDocument(doc) {
  return visit(checkDocument(doc), {
    SelectionSet: {
      enter: function(node, _key, parent) {
        if (parent && parent.kind === "OperationDefinition") {
          return;
        }
        var selections = node.selections;
        if (!selections) {
          return;
        }
        var skip = selections.some(function(selection) {
          return isField(selection) && (selection.name.value === "__typename" || selection.name.value.lastIndexOf("__", 0) === 0);
        });
        if (skip) {
          return;
        }
        var field = parent;
        if (isField(field) && field.directives && field.directives.some(function(d) {
          return d.name.value === "export";
        })) {
          return;
        }
        return __assign2(__assign2({}, node), { selections: __spreadArrays(selections, [TYPENAME_FIELD]) });
      }
    }
  });
}
function removeConnectionDirectiveFromDocument(doc) {
  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
}
function getArgumentMatcher(config) {
  return function argumentMatcher(argument) {
    return config.some(function(aConfig) {
      return argument.value && argument.value.kind === "Variable" && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
    });
  };
}
function removeArgumentsFromDocument(config, doc) {
  var argMatcher = getArgumentMatcher(config);
  return nullIfDocIsEmpty(visit(doc, {
    OperationDefinition: {
      enter: function(node) {
        return __assign2(__assign2({}, node), { variableDefinitions: node.variableDefinitions.filter(function(varDef) {
          return !config.some(function(arg) {
            return arg.name === varDef.variable.name.value;
          });
        }) });
      }
    },
    Field: {
      enter: function(node) {
        var shouldRemoveField = config.some(function(argConfig) {
          return argConfig.remove;
        });
        if (shouldRemoveField) {
          var argMatchCount_1 = 0;
          node.arguments.forEach(function(arg) {
            if (argMatcher(arg)) {
              argMatchCount_1 += 1;
            }
          });
          if (argMatchCount_1 === 1) {
            return null;
          }
        }
      }
    },
    Argument: {
      enter: function(node) {
        if (argMatcher(node)) {
          return null;
        }
      }
    }
  }));
}
function removeFragmentSpreadFromDocument(config, doc) {
  function enter(node) {
    if (config.some(function(def) {
      return def.name === node.name.value;
    })) {
      return null;
    }
  }
  return nullIfDocIsEmpty(visit(doc, {
    FragmentSpread: { enter },
    FragmentDefinition: { enter }
  }));
}
function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
  var allFragments = [];
  selectionSet.selections.forEach(function(selection) {
    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {
      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function(frag) {
        return allFragments.push(frag);
      });
    } else if (selection.kind === "FragmentSpread") {
      allFragments.push(selection);
    }
  });
  return allFragments;
}
function buildQueryFromSelectionSet(document) {
  var definition = getMainDefinition(document);
  var definitionOperation = definition.operation;
  if (definitionOperation === "query") {
    return document;
  }
  var modifiedDoc = visit(document, {
    OperationDefinition: {
      enter: function(node) {
        return __assign2(__assign2({}, node), { operation: "query" });
      }
    }
  });
  return modifiedDoc;
}
function removeClientSetsFromDocument(document) {
  checkDocument(document);
  var modifiedDoc = removeDirectivesFromDocument([
    {
      test: function(directive) {
        return directive.name.value === "client";
      },
      remove: true
    }
  ], document);
  if (modifiedDoc) {
    modifiedDoc = visit(modifiedDoc, {
      FragmentDefinition: {
        enter: function(node) {
          if (node.selectionSet) {
            var isTypenameOnly = node.selectionSet.selections.every(function(selection) {
              return isField(selection) && selection.name.value === "__typename";
            });
            if (isTypenameOnly) {
              return null;
            }
          }
        }
      }
    });
  }
  return modifiedDoc;
}
function cloneDeep(value) {
  return cloneDeepHelper(value, /* @__PURE__ */ new Map());
}
function cloneDeepHelper(val, seen) {
  switch (toString2.call(val)) {
    case "[object Array]": {
      if (seen.has(val))
        return seen.get(val);
      var copy_1 = val.slice(0);
      seen.set(val, copy_1);
      copy_1.forEach(function(child, i) {
        copy_1[i] = cloneDeepHelper(child, seen);
      });
      return copy_1;
    }
    case "[object Object]": {
      if (seen.has(val))
        return seen.get(val);
      var copy_2 = Object.create(Object.getPrototypeOf(val));
      seen.set(val, copy_2);
      Object.keys(val).forEach(function(key) {
        copy_2[key] = cloneDeepHelper(val[key], seen);
      });
      return copy_2;
    }
    default:
      return val;
  }
}
function getEnv() {
  if (typeof process !== "undefined" && "development") {
    return "development";
  }
  return "development";
}
function isEnv(env) {
  return getEnv() === env;
}
function isProduction() {
  return isEnv("production") === true;
}
function isDevelopment() {
  return isEnv("development") === true;
}
function isTest() {
  return isEnv("test") === true;
}
function tryFunctionOrLogError(f) {
  try {
    return f();
  } catch (e) {
    if (console.error) {
      console.error(e);
    }
  }
}
function graphQLResultHasError(result2) {
  return result2.errors && result2.errors.length;
}
function deepFreeze(o) {
  Object.freeze(o);
  Object.getOwnPropertyNames(o).forEach(function(prop) {
    if (o[prop] !== null && (typeof o[prop] === "object" || typeof o[prop] === "function") && !Object.isFrozen(o[prop])) {
      deepFreeze(o[prop]);
    }
  });
  return o;
}
function maybeDeepFreeze(obj) {
  if (isDevelopment() || isTest()) {
    var symbolIsPolyfilled = typeof Symbol === "function" && typeof Symbol("") === "string";
    if (!symbolIsPolyfilled) {
      return deepFreeze(obj);
    }
  }
  return obj;
}
function mergeDeep() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  return mergeDeepArray(sources);
}
function mergeDeepArray(sources) {
  var target = sources[0] || {};
  var count = sources.length;
  if (count > 1) {
    var pastCopies = [];
    target = shallowCopyForMerge(target, pastCopies);
    for (var i = 1; i < count; ++i) {
      target = mergeHelper(target, sources[i], pastCopies);
    }
  }
  return target;
}
function isObject(obj) {
  return obj !== null && typeof obj === "object";
}
function mergeHelper(target, source, pastCopies) {
  if (isObject(source) && isObject(target)) {
    if (Object.isExtensible && !Object.isExtensible(target)) {
      target = shallowCopyForMerge(target, pastCopies);
    }
    Object.keys(source).forEach(function(sourceKey) {
      var sourceValue = source[sourceKey];
      if (hasOwnProperty2.call(target, sourceKey)) {
        var targetValue = target[sourceKey];
        if (sourceValue !== targetValue) {
          target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);
        }
      } else {
        target[sourceKey] = sourceValue;
      }
    });
    return target;
  }
  return source;
}
function shallowCopyForMerge(value, pastCopies) {
  if (value !== null && typeof value === "object" && pastCopies.indexOf(value) < 0) {
    if (Array.isArray(value)) {
      value = value.slice(0);
    } else {
      value = __assign2({ __proto__: Object.getPrototypeOf(value) }, value);
    }
    pastCopies.push(value);
  }
  return value;
}
var import_fast_json_stable_stringify, KNOWN_DIRECTIVES, TYPENAME_FIELD, connectionRemoveConfig, canUseWeakMap, toString2, hasOwnProperty2;
var init_bundle_esm2 = __esm({
  "../../node_modules/apollo-utilities/lib/bundle.esm.js"() {
    init_visitor();
    init_invariant_esm();
    init_tslib_es63();
    import_fast_json_stable_stringify = __toESM(require_fast_json_stable_stringify());
    init_equality_esm();
    KNOWN_DIRECTIVES = [
      "connection",
      "include",
      "skip",
      "client",
      "rest",
      "export"
    ];
    TYPENAME_FIELD = {
      kind: "Field",
      name: {
        kind: "Name",
        value: "__typename"
      }
    };
    connectionRemoveConfig = {
      test: function(directive) {
        var willRemove = directive.name.value === "connection";
        if (willRemove) {
          if (!directive.arguments || !directive.arguments.some(function(arg) {
            return arg.name.value === "key";
          })) {
            invariant.warn("Removing an @connection directive even though it does not have a key. You may want to use the key parameter to specify a store key.");
          }
        }
        return willRemove;
      }
    };
    canUseWeakMap = typeof WeakMap === "function" && !(typeof navigator === "object" && navigator.product === "ReactNative");
    toString2 = Object.prototype.toString;
    hasOwnProperty2 = Object.prototype.hasOwnProperty;
  }
});

// ../../node_modules/apollo-link/lib/bundle.esm.js
var bundle_esm_exports = {};
__export(bundle_esm_exports, {
  ApolloLink: () => ApolloLink,
  Observable: () => bundle_esm_default,
  concat: () => concat,
  createOperation: () => createOperation,
  empty: () => empty,
  execute: () => execute,
  from: () => from,
  fromError: () => fromError,
  fromPromise: () => fromPromise,
  getOperationName: () => getOperationName,
  makePromise: () => makePromise,
  split: () => split,
  toPromise: () => toPromise
});
function validateOperation(operation) {
  var OPERATION_FIELDS = [
    "query",
    "operationName",
    "variables",
    "extensions",
    "context"
  ];
  for (var _i = 0, _a3 = Object.keys(operation); _i < _a3.length; _i++) {
    var key = _a3[_i];
    if (OPERATION_FIELDS.indexOf(key) < 0) {
      throw false ? new InvariantError(2) : new InvariantError("illegal argument: " + key);
    }
  }
  return operation;
}
function isTerminating(link) {
  return link.request.length <= 1;
}
function toPromise(observable) {
  var completed = false;
  return new Promise(function(resolve, reject) {
    observable.subscribe({
      next: function(data) {
        if (completed) {
          invariant.warn("Promise Wrapper does not support multiple results from Observable");
        } else {
          completed = true;
          resolve(data);
        }
      },
      error: reject
    });
  });
}
function fromPromise(promise) {
  return new bundle_esm_default(function(observer) {
    promise.then(function(value) {
      observer.next(value);
      observer.complete();
    }).catch(observer.error.bind(observer));
  });
}
function fromError(errorValue) {
  return new bundle_esm_default(function(observer) {
    observer.error(errorValue);
  });
}
function transformOperation(operation) {
  var transformedOperation = {
    variables: operation.variables || {},
    extensions: operation.extensions || {},
    operationName: operation.operationName,
    query: operation.query
  };
  if (!transformedOperation.operationName) {
    transformedOperation.operationName = typeof transformedOperation.query !== "string" ? getOperationName(transformedOperation.query) : "";
  }
  return transformedOperation;
}
function createOperation(starting, operation) {
  var context = __assign({}, starting);
  var setContext = function(next) {
    if (typeof next === "function") {
      context = __assign({}, context, next(context));
    } else {
      context = __assign({}, context, next);
    }
  };
  var getContext = function() {
    return __assign({}, context);
  };
  Object.defineProperty(operation, "setContext", {
    enumerable: false,
    value: setContext
  });
  Object.defineProperty(operation, "getContext", {
    enumerable: false,
    value: getContext
  });
  Object.defineProperty(operation, "toKey", {
    enumerable: false,
    value: function() {
      return getKey(operation);
    }
  });
  return operation;
}
function getKey(operation) {
  var query = operation.query, variables = operation.variables, operationName = operation.operationName;
  return JSON.stringify([operationName, query, variables]);
}
function passthrough(op, forward) {
  return forward ? forward(op) : bundle_esm_default.of();
}
function toLink(handler) {
  return typeof handler === "function" ? new ApolloLink(handler) : handler;
}
function empty() {
  return new ApolloLink(function() {
    return bundle_esm_default.of();
  });
}
function from(links) {
  if (links.length === 0)
    return empty();
  return links.map(toLink).reduce(function(x, y) {
    return x.concat(y);
  });
}
function split(test, left, right) {
  var leftLink = toLink(left);
  var rightLink = toLink(right || new ApolloLink(passthrough));
  if (isTerminating(leftLink) && isTerminating(rightLink)) {
    return new ApolloLink(function(operation) {
      return test(operation) ? leftLink.request(operation) || bundle_esm_default.of() : rightLink.request(operation) || bundle_esm_default.of();
    });
  } else {
    return new ApolloLink(function(operation, forward) {
      return test(operation) ? leftLink.request(operation, forward) || bundle_esm_default.of() : rightLink.request(operation, forward) || bundle_esm_default.of();
    });
  }
}
function execute(link, operation) {
  return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || bundle_esm_default.of();
}
var LinkError, makePromise, concat, ApolloLink;
var init_bundle_esm3 = __esm({
  "../../node_modules/apollo-link/lib/bundle.esm.js"() {
    init_bundle_esm();
    init_bundle_esm();
    init_invariant_esm();
    init_tslib_es62();
    init_bundle_esm2();
    init_bundle_esm2();
    LinkError = function(_super) {
      __extends2(LinkError2, _super);
      function LinkError2(message, link) {
        var _this = _super.call(this, message) || this;
        _this.link = link;
        return _this;
      }
      return LinkError2;
    }(Error);
    makePromise = toPromise;
    concat = function(first, second) {
      var firstLink = toLink(first);
      if (isTerminating(firstLink)) {
        invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
        return firstLink;
      }
      var nextLink = toLink(second);
      if (isTerminating(nextLink)) {
        return new ApolloLink(function(operation) {
          return firstLink.request(operation, function(op) {
            return nextLink.request(op) || bundle_esm_default.of();
          }) || bundle_esm_default.of();
        });
      } else {
        return new ApolloLink(function(operation, forward) {
          return firstLink.request(operation, function(op) {
            return nextLink.request(op, forward) || bundle_esm_default.of();
          }) || bundle_esm_default.of();
        });
      }
    };
    ApolloLink = function() {
      function ApolloLink2(request) {
        if (request)
          this.request = request;
      }
      ApolloLink2.prototype.split = function(test, left, right) {
        return this.concat(split(test, left, right || new ApolloLink2(passthrough)));
      };
      ApolloLink2.prototype.concat = function(next) {
        return concat(this, next);
      };
      ApolloLink2.prototype.request = function(operation, forward) {
        throw false ? new InvariantError(1) : new InvariantError("request is not implemented");
      };
      ApolloLink2.empty = empty;
      ApolloLink2.from = from;
      ApolloLink2.split = split;
      ApolloLink2.execute = execute;
      return ApolloLink2;
    }();
  }
});

// ../../node_modules/apollo-client/node_modules/tslib/tslib.es6.js
function __extends3(d, b) {
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var extendStatics3, __assign3;
var init_tslib_es64 = __esm({
  "../../node_modules/apollo-client/node_modules/tslib/tslib.es6.js"() {
    extendStatics3 = function(d, b) {
      extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics3(d, b);
    };
    __assign3 = function() {
      __assign3 = Object.assign || function __assign4(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign3.apply(this, arguments);
    };
  }
});

// ../../node_modules/symbol-observable/es/ponyfill.js
function symbolObservablePonyfill(root2) {
  var result2;
  var Symbol2 = root2.Symbol;
  if (typeof Symbol2 === "function") {
    if (Symbol2.observable) {
      result2 = Symbol2.observable;
    } else {
      result2 = Symbol2("observable");
      Symbol2.observable = result2;
    }
  } else {
    result2 = "@@observable";
  }
  return result2;
}
var init_ponyfill = __esm({
  "../../node_modules/symbol-observable/es/ponyfill.js"() {
  }
});

// ../../node_modules/symbol-observable/es/index.js
var root, result, es_default;
var init_es = __esm({
  "../../node_modules/symbol-observable/es/index.js"() {
    init_ponyfill();
    if (typeof self !== "undefined") {
      root = self;
    } else if (typeof window !== "undefined") {
      root = window;
    } else if (typeof global !== "undefined") {
      root = global;
    } else if (typeof module !== "undefined") {
      root = module;
    } else {
      root = Function("return this")();
    }
    result = symbolObservablePonyfill(root);
    es_default = result;
  }
});

// ../../node_modules/apollo-client/bundle.esm.js
var bundle_esm_exports2 = {};
__export(bundle_esm_exports2, {
  ApolloClient: () => ApolloClient,
  ApolloError: () => ApolloError,
  FetchType: () => FetchType,
  NetworkStatus: () => NetworkStatus,
  ObservableQuery: () => ObservableQuery,
  default: () => bundle_esm_default2,
  isApolloError: () => isApolloError
});
function isNetworkRequestInFlight(networkStatus) {
  return networkStatus < 7;
}
function isNonEmptyArray(value) {
  return Array.isArray(value) && value.length > 0;
}
function isApolloError(err) {
  return err.hasOwnProperty("graphQLErrors");
}
function defaultSubscriptionObserverErrorCallback(error) {
  invariant.error("Unhandled error", error.message, error.stack);
}
function iterateObserversSafely(observers, method, argument) {
  var observersWithMethod = [];
  observers.forEach(function(obs) {
    return obs[method] && observersWithMethod.push(obs);
  });
  observersWithMethod.forEach(function(obs) {
    return obs[method](argument);
  });
}
function assertNotCacheFirstOrOnly(obsQuery) {
  var fetchPolicy = obsQuery.options.fetchPolicy;
  false ? invariant(fetchPolicy !== "cache-first" && fetchPolicy !== "cache-only", 3) : invariant(fetchPolicy !== "cache-first" && fetchPolicy !== "cache-only", "Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.");
}
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function multiplex(inner) {
  var observers = /* @__PURE__ */ new Set();
  var sub = null;
  return new Observable2(function(observer) {
    observers.add(observer);
    sub = sub || inner.subscribe({
      next: function(value) {
        observers.forEach(function(obs) {
          return obs.next && obs.next(value);
        });
      },
      error: function(error) {
        observers.forEach(function(obs) {
          return obs.error && obs.error(error);
        });
      },
      complete: function() {
        observers.forEach(function(obs) {
          return obs.complete && obs.complete();
        });
      }
    });
    return function() {
      if (observers.delete(observer) && !observers.size && sub) {
        sub.unsubscribe();
        sub = null;
      }
    };
  });
}
function asyncMap(observable, mapFn) {
  return new Observable2(function(observer) {
    var next = observer.next, error = observer.error, complete = observer.complete;
    var activeNextCount = 0;
    var completed = false;
    var handler = {
      next: function(value) {
        ++activeNextCount;
        new Promise(function(resolve) {
          resolve(mapFn(value));
        }).then(function(result2) {
          --activeNextCount;
          next && next.call(observer, result2);
          completed && handler.complete();
        }, function(e) {
          --activeNextCount;
          error && error.call(observer, e);
        });
      },
      error: function(e) {
        error && error.call(observer, e);
      },
      complete: function() {
        completed = true;
        if (!activeNextCount) {
          complete && complete.call(observer);
        }
      }
    };
    var sub = observable.subscribe(handler);
    return function() {
      return sub.unsubscribe();
    };
  });
}
var NetworkStatus, Observable2, generateErrorMessage, ApolloError, FetchType, hasError, ObservableQuery, MutationStore, QueryStore, LocalState, hasOwnProperty3, QueryManager, DataStore, version, hasSuggestedDevtools, ApolloClient, bundle_esm_default2;
var init_bundle_esm4 = __esm({
  "../../node_modules/apollo-client/bundle.esm.js"() {
    init_tslib_es64();
    init_bundle_esm2();
    init_bundle_esm3();
    init_es();
    init_invariant_esm();
    init_visitor();
    (function(NetworkStatus2) {
      NetworkStatus2[NetworkStatus2["loading"] = 1] = "loading";
      NetworkStatus2[NetworkStatus2["setVariables"] = 2] = "setVariables";
      NetworkStatus2[NetworkStatus2["fetchMore"] = 3] = "fetchMore";
      NetworkStatus2[NetworkStatus2["refetch"] = 4] = "refetch";
      NetworkStatus2[NetworkStatus2["poll"] = 6] = "poll";
      NetworkStatus2[NetworkStatus2["ready"] = 7] = "ready";
      NetworkStatus2[NetworkStatus2["error"] = 8] = "error";
    })(NetworkStatus || (NetworkStatus = {}));
    Observable2 = function(_super) {
      __extends3(Observable3, _super);
      function Observable3() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Observable3.prototype[es_default] = function() {
        return this;
      };
      Observable3.prototype["@@observable"] = function() {
        return this;
      };
      return Observable3;
    }(bundle_esm_default);
    generateErrorMessage = function(err) {
      var message = "";
      if (isNonEmptyArray(err.graphQLErrors)) {
        err.graphQLErrors.forEach(function(graphQLError) {
          var errorMessage = graphQLError ? graphQLError.message : "Error message not found.";
          message += "GraphQL error: " + errorMessage + "\n";
        });
      }
      if (err.networkError) {
        message += "Network error: " + err.networkError.message + "\n";
      }
      message = message.replace(/\n$/, "");
      return message;
    };
    ApolloError = function(_super) {
      __extends3(ApolloError2, _super);
      function ApolloError2(_a3) {
        var graphQLErrors = _a3.graphQLErrors, networkError = _a3.networkError, errorMessage = _a3.errorMessage, extraInfo = _a3.extraInfo;
        var _this = _super.call(this, errorMessage) || this;
        _this.graphQLErrors = graphQLErrors || [];
        _this.networkError = networkError || null;
        if (!errorMessage) {
          _this.message = generateErrorMessage(_this);
        } else {
          _this.message = errorMessage;
        }
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError2.prototype;
        return _this;
      }
      return ApolloError2;
    }(Error);
    (function(FetchType2) {
      FetchType2[FetchType2["normal"] = 1] = "normal";
      FetchType2[FetchType2["refetch"] = 2] = "refetch";
      FetchType2[FetchType2["poll"] = 3] = "poll";
    })(FetchType || (FetchType = {}));
    hasError = function(storeValue, policy) {
      if (policy === void 0) {
        policy = "none";
      }
      return storeValue && (storeValue.networkError || policy === "none" && isNonEmptyArray(storeValue.graphQLErrors));
    };
    ObservableQuery = function(_super) {
      __extends3(ObservableQuery2, _super);
      function ObservableQuery2(_a3) {
        var queryManager = _a3.queryManager, options = _a3.options, _b = _a3.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;
        var _this = _super.call(this, function(observer) {
          return _this.onSubscribe(observer);
        }) || this;
        _this.observers = /* @__PURE__ */ new Set();
        _this.subscriptions = /* @__PURE__ */ new Set();
        _this.isTornDown = false;
        _this.options = options;
        _this.variables = options.variables || {};
        _this.queryId = queryManager.generateQueryId();
        _this.shouldSubscribe = shouldSubscribe;
        var opDef = getOperationDefinition(options.query);
        _this.queryName = opDef && opDef.name && opDef.name.value;
        _this.queryManager = queryManager;
        return _this;
      }
      ObservableQuery2.prototype.result = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
          var observer = {
            next: function(result2) {
              resolve(result2);
              _this.observers.delete(observer);
              if (!_this.observers.size) {
                _this.queryManager.removeQuery(_this.queryId);
              }
              setTimeout(function() {
                subscription.unsubscribe();
              }, 0);
            },
            error: reject
          };
          var subscription = _this.subscribe(observer);
        });
      };
      ObservableQuery2.prototype.currentResult = function() {
        var result2 = this.getCurrentResult();
        if (result2.data === void 0) {
          result2.data = {};
        }
        return result2;
      };
      ObservableQuery2.prototype.getCurrentResult = function() {
        if (this.isTornDown) {
          var lastResult = this.lastResult;
          return {
            data: !this.lastError && lastResult && lastResult.data || void 0,
            error: this.lastError,
            loading: false,
            networkStatus: NetworkStatus.error
          };
        }
        var _a3 = this.queryManager.getCurrentQueryResult(this), data = _a3.data, partial = _a3.partial;
        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);
        var result2;
        var fetchPolicy = this.options.fetchPolicy;
        var isNetworkFetchPolicy = fetchPolicy === "network-only" || fetchPolicy === "no-cache";
        if (queryStoreValue) {
          var networkStatus = queryStoreValue.networkStatus;
          if (hasError(queryStoreValue, this.options.errorPolicy)) {
            return {
              data: void 0,
              loading: false,
              networkStatus,
              error: new ApolloError({
                graphQLErrors: queryStoreValue.graphQLErrors,
                networkError: queryStoreValue.networkError
              })
            };
          }
          if (queryStoreValue.variables) {
            this.options.variables = __assign3(__assign3({}, this.options.variables), queryStoreValue.variables);
            this.variables = this.options.variables;
          }
          result2 = {
            data,
            loading: isNetworkRequestInFlight(networkStatus),
            networkStatus
          };
          if (queryStoreValue.graphQLErrors && this.options.errorPolicy === "all") {
            result2.errors = queryStoreValue.graphQLErrors;
          }
        } else {
          var loading = isNetworkFetchPolicy || partial && fetchPolicy !== "cache-only";
          result2 = {
            data,
            loading,
            networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready
          };
        }
        if (!partial) {
          this.updateLastResult(__assign3(__assign3({}, result2), { stale: false }));
        }
        return __assign3(__assign3({}, result2), { partial });
      };
      ObservableQuery2.prototype.isDifferentFromLastResult = function(newResult) {
        var snapshot = this.lastResultSnapshot;
        return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && equal(snapshot.data, newResult.data));
      };
      ObservableQuery2.prototype.getLastResult = function() {
        return this.lastResult;
      };
      ObservableQuery2.prototype.getLastError = function() {
        return this.lastError;
      };
      ObservableQuery2.prototype.resetLastResults = function() {
        delete this.lastResult;
        delete this.lastResultSnapshot;
        delete this.lastError;
        this.isTornDown = false;
      };
      ObservableQuery2.prototype.resetQueryStoreErrors = function() {
        var queryStore = this.queryManager.queryStore.get(this.queryId);
        if (queryStore) {
          queryStore.networkError = null;
          queryStore.graphQLErrors = [];
        }
      };
      ObservableQuery2.prototype.refetch = function(variables) {
        var fetchPolicy = this.options.fetchPolicy;
        if (fetchPolicy === "cache-only") {
          return Promise.reject(false ? new InvariantError(1) : new InvariantError("cache-only fetchPolicy option should not be used together with query refetch."));
        }
        if (fetchPolicy !== "no-cache" && fetchPolicy !== "cache-and-network") {
          fetchPolicy = "network-only";
        }
        if (!equal(this.variables, variables)) {
          this.variables = __assign3(__assign3({}, this.variables), variables);
        }
        if (!equal(this.options.variables, this.variables)) {
          this.options.variables = __assign3(__assign3({}, this.options.variables), this.variables);
        }
        return this.queryManager.fetchQuery(this.queryId, __assign3(__assign3({}, this.options), { fetchPolicy }), FetchType.refetch);
      };
      ObservableQuery2.prototype.fetchMore = function(fetchMoreOptions) {
        var _this = this;
        false ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, "updateQuery option is required. This function defines how to update the query data with the new results.");
        var combinedOptions = __assign3(__assign3({}, fetchMoreOptions.query ? fetchMoreOptions : __assign3(__assign3(__assign3({}, this.options), fetchMoreOptions), { variables: __assign3(__assign3({}, this.variables), fetchMoreOptions.variables) })), { fetchPolicy: "network-only" });
        var qid = this.queryManager.generateQueryId();
        return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function(fetchMoreResult) {
          _this.updateQuery(function(previousResult) {
            return fetchMoreOptions.updateQuery(previousResult, {
              fetchMoreResult: fetchMoreResult.data,
              variables: combinedOptions.variables
            });
          });
          _this.queryManager.stopQuery(qid);
          return fetchMoreResult;
        }, function(error) {
          _this.queryManager.stopQuery(qid);
          throw error;
        });
      };
      ObservableQuery2.prototype.subscribeToMore = function(options) {
        var _this = this;
        var subscription = this.queryManager.startGraphQLSubscription({
          query: options.document,
          variables: options.variables
        }).subscribe({
          next: function(subscriptionData) {
            var updateQuery = options.updateQuery;
            if (updateQuery) {
              _this.updateQuery(function(previous, _a3) {
                var variables = _a3.variables;
                return updateQuery(previous, {
                  subscriptionData,
                  variables
                });
              });
            }
          },
          error: function(err) {
            if (options.onError) {
              options.onError(err);
              return;
            }
            invariant.error("Unhandled GraphQL subscription error", err);
          }
        });
        this.subscriptions.add(subscription);
        return function() {
          if (_this.subscriptions.delete(subscription)) {
            subscription.unsubscribe();
          }
        };
      };
      ObservableQuery2.prototype.setOptions = function(opts) {
        var oldFetchPolicy = this.options.fetchPolicy;
        this.options = __assign3(__assign3({}, this.options), opts);
        if (opts.pollInterval) {
          this.startPolling(opts.pollInterval);
        } else if (opts.pollInterval === 0) {
          this.stopPolling();
        }
        var fetchPolicy = opts.fetchPolicy;
        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === "cache-only" || oldFetchPolicy === "standby" || fetchPolicy === "network-only"), opts.fetchResults);
      };
      ObservableQuery2.prototype.setVariables = function(variables, tryFetch, fetchResults) {
        if (tryFetch === void 0) {
          tryFetch = false;
        }
        if (fetchResults === void 0) {
          fetchResults = true;
        }
        this.isTornDown = false;
        variables = variables || this.variables;
        if (!tryFetch && equal(variables, this.variables)) {
          return this.observers.size && fetchResults ? this.result() : Promise.resolve();
        }
        this.variables = this.options.variables = variables;
        if (!this.observers.size) {
          return Promise.resolve();
        }
        return this.queryManager.fetchQuery(this.queryId, this.options);
      };
      ObservableQuery2.prototype.updateQuery = function(mapFn) {
        var queryManager = this.queryManager;
        var _a3 = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a3.previousResult, variables = _a3.variables, document = _a3.document;
        var newResult = tryFunctionOrLogError(function() {
          return mapFn(previousResult, { variables });
        });
        if (newResult) {
          queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);
          queryManager.broadcastQueries();
        }
      };
      ObservableQuery2.prototype.stopPolling = function() {
        this.queryManager.stopPollingQuery(this.queryId);
        this.options.pollInterval = void 0;
      };
      ObservableQuery2.prototype.startPolling = function(pollInterval) {
        assertNotCacheFirstOrOnly(this);
        this.options.pollInterval = pollInterval;
        this.queryManager.startPollingQuery(this.options, this.queryId);
      };
      ObservableQuery2.prototype.updateLastResult = function(newResult) {
        var previousResult = this.lastResult;
        this.lastResult = newResult;
        this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);
        return previousResult;
      };
      ObservableQuery2.prototype.onSubscribe = function(observer) {
        var _this = this;
        try {
          var subObserver = observer._subscription._observer;
          if (subObserver && !subObserver.error) {
            subObserver.error = defaultSubscriptionObserverErrorCallback;
          }
        } catch (_a3) {
        }
        var first = !this.observers.size;
        this.observers.add(observer);
        if (observer.next && this.lastResult)
          observer.next(this.lastResult);
        if (observer.error && this.lastError)
          observer.error(this.lastError);
        if (first) {
          this.setUpQuery();
        }
        return function() {
          if (_this.observers.delete(observer) && !_this.observers.size) {
            _this.tearDownQuery();
          }
        };
      };
      ObservableQuery2.prototype.setUpQuery = function() {
        var _this = this;
        var _a3 = this, queryManager = _a3.queryManager, queryId = _a3.queryId;
        if (this.shouldSubscribe) {
          queryManager.addObservableQuery(queryId, this);
        }
        if (this.options.pollInterval) {
          assertNotCacheFirstOrOnly(this);
          queryManager.startPollingQuery(this.options, queryId);
        }
        var onError = function(error) {
          _this.updateLastResult(__assign3(__assign3({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));
          iterateObserversSafely(_this.observers, "error", _this.lastError = error);
        };
        queryManager.observeQuery(queryId, this.options, {
          next: function(result2) {
            if (_this.lastError || _this.isDifferentFromLastResult(result2)) {
              var previousResult_1 = _this.updateLastResult(result2);
              var _a4 = _this.options, query_1 = _a4.query, variables = _a4.variables, fetchPolicy_1 = _a4.fetchPolicy;
              if (queryManager.transform(query_1).hasClientExports) {
                queryManager.getLocalState().addExportedVariables(query_1, variables).then(function(variables2) {
                  var previousVariables = _this.variables;
                  _this.variables = _this.options.variables = variables2;
                  if (!result2.loading && previousResult_1 && fetchPolicy_1 !== "cache-only" && queryManager.transform(query_1).serverQuery && !equal(previousVariables, variables2)) {
                    _this.refetch();
                  } else {
                    iterateObserversSafely(_this.observers, "next", result2);
                  }
                });
              } else {
                iterateObserversSafely(_this.observers, "next", result2);
              }
            }
          },
          error: onError
        }).catch(onError);
      };
      ObservableQuery2.prototype.tearDownQuery = function() {
        var queryManager = this.queryManager;
        this.isTornDown = true;
        queryManager.stopPollingQuery(this.queryId);
        this.subscriptions.forEach(function(sub) {
          return sub.unsubscribe();
        });
        this.subscriptions.clear();
        queryManager.removeObservableQuery(this.queryId);
        queryManager.stopQuery(this.queryId);
        this.observers.clear();
      };
      return ObservableQuery2;
    }(Observable2);
    MutationStore = function() {
      function MutationStore2() {
        this.store = {};
      }
      MutationStore2.prototype.getStore = function() {
        return this.store;
      };
      MutationStore2.prototype.get = function(mutationId) {
        return this.store[mutationId];
      };
      MutationStore2.prototype.initMutation = function(mutationId, mutation, variables) {
        this.store[mutationId] = {
          mutation,
          variables: variables || {},
          loading: true,
          error: null
        };
      };
      MutationStore2.prototype.markMutationError = function(mutationId, error) {
        var mutation = this.store[mutationId];
        if (mutation) {
          mutation.loading = false;
          mutation.error = error;
        }
      };
      MutationStore2.prototype.markMutationResult = function(mutationId) {
        var mutation = this.store[mutationId];
        if (mutation) {
          mutation.loading = false;
          mutation.error = null;
        }
      };
      MutationStore2.prototype.reset = function() {
        this.store = {};
      };
      return MutationStore2;
    }();
    QueryStore = function() {
      function QueryStore2() {
        this.store = {};
      }
      QueryStore2.prototype.getStore = function() {
        return this.store;
      };
      QueryStore2.prototype.get = function(queryId) {
        return this.store[queryId];
      };
      QueryStore2.prototype.initQuery = function(query) {
        var previousQuery = this.store[query.queryId];
        false ? invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), 19) : invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), "Internal Error: may not update existing query string in store");
        var isSetVariables = false;
        var previousVariables = null;
        if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {
          if (!equal(previousQuery.variables, query.variables)) {
            isSetVariables = true;
            previousVariables = previousQuery.variables;
          }
        }
        var networkStatus;
        if (isSetVariables) {
          networkStatus = NetworkStatus.setVariables;
        } else if (query.isPoll) {
          networkStatus = NetworkStatus.poll;
        } else if (query.isRefetch) {
          networkStatus = NetworkStatus.refetch;
        } else {
          networkStatus = NetworkStatus.loading;
        }
        var graphQLErrors = [];
        if (previousQuery && previousQuery.graphQLErrors) {
          graphQLErrors = previousQuery.graphQLErrors;
        }
        this.store[query.queryId] = {
          document: query.document,
          variables: query.variables,
          previousVariables,
          networkError: null,
          graphQLErrors,
          networkStatus,
          metadata: query.metadata
        };
        if (typeof query.fetchMoreForQueryId === "string" && this.store[query.fetchMoreForQueryId]) {
          this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;
        }
      };
      QueryStore2.prototype.markQueryResult = function(queryId, result2, fetchMoreForQueryId) {
        if (!this.store || !this.store[queryId])
          return;
        this.store[queryId].networkError = null;
        this.store[queryId].graphQLErrors = isNonEmptyArray(result2.errors) ? result2.errors : [];
        this.store[queryId].previousVariables = null;
        this.store[queryId].networkStatus = NetworkStatus.ready;
        if (typeof fetchMoreForQueryId === "string" && this.store[fetchMoreForQueryId]) {
          this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;
        }
      };
      QueryStore2.prototype.markQueryError = function(queryId, error, fetchMoreForQueryId) {
        if (!this.store || !this.store[queryId])
          return;
        this.store[queryId].networkError = error;
        this.store[queryId].networkStatus = NetworkStatus.error;
        if (typeof fetchMoreForQueryId === "string") {
          this.markQueryResultClient(fetchMoreForQueryId, true);
        }
      };
      QueryStore2.prototype.markQueryResultClient = function(queryId, complete) {
        var storeValue = this.store && this.store[queryId];
        if (storeValue) {
          storeValue.networkError = null;
          storeValue.previousVariables = null;
          if (complete) {
            storeValue.networkStatus = NetworkStatus.ready;
          }
        }
      };
      QueryStore2.prototype.stopQuery = function(queryId) {
        delete this.store[queryId];
      };
      QueryStore2.prototype.reset = function(observableQueryIds) {
        var _this = this;
        Object.keys(this.store).forEach(function(queryId) {
          if (observableQueryIds.indexOf(queryId) < 0) {
            _this.stopQuery(queryId);
          } else {
            _this.store[queryId].networkStatus = NetworkStatus.loading;
          }
        });
      };
      return QueryStore2;
    }();
    LocalState = function() {
      function LocalState2(_a3) {
        var cache = _a3.cache, client = _a3.client, resolvers = _a3.resolvers, fragmentMatcher = _a3.fragmentMatcher;
        this.cache = cache;
        if (client) {
          this.client = client;
        }
        if (resolvers) {
          this.addResolvers(resolvers);
        }
        if (fragmentMatcher) {
          this.setFragmentMatcher(fragmentMatcher);
        }
      }
      LocalState2.prototype.addResolvers = function(resolvers) {
        var _this = this;
        this.resolvers = this.resolvers || {};
        if (Array.isArray(resolvers)) {
          resolvers.forEach(function(resolverGroup) {
            _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);
          });
        } else {
          this.resolvers = mergeDeep(this.resolvers, resolvers);
        }
      };
      LocalState2.prototype.setResolvers = function(resolvers) {
        this.resolvers = {};
        this.addResolvers(resolvers);
      };
      LocalState2.prototype.getResolvers = function() {
        return this.resolvers || {};
      };
      LocalState2.prototype.runResolvers = function(_a3) {
        var document = _a3.document, remoteResult = _a3.remoteResult, context = _a3.context, variables = _a3.variables, _b = _a3.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_c) {
            if (document) {
              return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {
                return __assign3(__assign3({}, remoteResult), { data: localResult.result });
              })];
            }
            return [2, remoteResult];
          });
        });
      };
      LocalState2.prototype.setFragmentMatcher = function(fragmentMatcher) {
        this.fragmentMatcher = fragmentMatcher;
      };
      LocalState2.prototype.getFragmentMatcher = function() {
        return this.fragmentMatcher;
      };
      LocalState2.prototype.clientQuery = function(document) {
        if (hasDirectives(["client"], document)) {
          if (this.resolvers) {
            return document;
          }
          invariant.warn("Found @client directives in a query but no ApolloClient resolvers were specified. This means ApolloClient local resolver handling has been disabled, and @client directives will be passed through to your link chain.");
        }
        return null;
      };
      LocalState2.prototype.serverQuery = function(document) {
        return this.resolvers ? removeClientSetsFromDocument(document) : document;
      };
      LocalState2.prototype.prepareContext = function(context) {
        if (context === void 0) {
          context = {};
        }
        var cache = this.cache;
        var newContext = __assign3(__assign3({}, context), { cache, getCacheKey: function(obj) {
          if (cache.config) {
            return cache.config.dataIdFromObject(obj);
          } else {
            false ? invariant(false, 6) : invariant(false, "To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.");
          }
        } });
        return newContext;
      };
      LocalState2.prototype.addExportedVariables = function(document, variables, context) {
        if (variables === void 0) {
          variables = {};
        }
        if (context === void 0) {
          context = {};
        }
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a3) {
            if (document) {
              return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {
                return __assign3(__assign3({}, variables), data.exportedVariables);
              })];
            }
            return [2, __assign3({}, variables)];
          });
        });
      };
      LocalState2.prototype.shouldForceResolvers = function(document) {
        var forceResolvers = false;
        visit(document, {
          Directive: {
            enter: function(node) {
              if (node.name.value === "client" && node.arguments) {
                forceResolvers = node.arguments.some(function(arg) {
                  return arg.name.value === "always" && arg.value.kind === "BooleanValue" && arg.value.value === true;
                });
                if (forceResolvers) {
                  return BREAK;
                }
              }
            }
          }
        });
        return forceResolvers;
      };
      LocalState2.prototype.buildRootValueFromCache = function(document, variables) {
        return this.cache.diff({
          query: buildQueryFromSelectionSet(document),
          variables,
          returnPartialData: true,
          optimistic: false
        }).result;
      };
      LocalState2.prototype.resolveDocument = function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
        if (context === void 0) {
          context = {};
        }
        if (variables === void 0) {
          variables = {};
        }
        if (fragmentMatcher === void 0) {
          fragmentMatcher = function() {
            return true;
          };
        }
        if (onlyRunForcedResolvers === void 0) {
          onlyRunForcedResolvers = false;
        }
        return __awaiter(this, void 0, void 0, function() {
          var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a3, cache, client, execContext;
          return __generator(this, function(_b) {
            mainDefinition = getMainDefinition(document);
            fragments = getFragmentDefinitions(document);
            fragmentMap = createFragmentMap(fragments);
            definitionOperation = mainDefinition.operation;
            defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : "Query";
            _a3 = this, cache = _a3.cache, client = _a3.client;
            execContext = {
              fragmentMap,
              context: __assign3(__assign3({}, context), {
                cache,
                client
              }),
              variables,
              fragmentMatcher,
              defaultOperationType,
              exportedVariables: {},
              onlyRunForcedResolvers
            };
            return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function(result2) {
              return {
                result: result2,
                exportedVariables: execContext.exportedVariables
              };
            })];
          });
        });
      };
      LocalState2.prototype.resolveSelectionSet = function(selectionSet, rootValue, execContext) {
        return __awaiter(this, void 0, void 0, function() {
          var fragmentMap, context, variables, resultsToMerge, execute2;
          var _this = this;
          return __generator(this, function(_a3) {
            fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
            resultsToMerge = [rootValue];
            execute2 = function(selection) {
              return __awaiter(_this, void 0, void 0, function() {
                var fragment, typeCondition;
                return __generator(this, function(_a4) {
                  if (!shouldInclude(selection, variables)) {
                    return [2];
                  }
                  if (isField(selection)) {
                    return [2, this.resolveField(selection, rootValue, execContext).then(function(fieldResult) {
                      var _a5;
                      if (typeof fieldResult !== "undefined") {
                        resultsToMerge.push((_a5 = {}, _a5[resultKeyNameFromField(selection)] = fieldResult, _a5));
                      }
                    })];
                  }
                  if (isInlineFragment(selection)) {
                    fragment = selection;
                  } else {
                    fragment = fragmentMap[selection.name.value];
                    false ? invariant(fragment, 7) : invariant(fragment, "No fragment named " + selection.name.value);
                  }
                  if (fragment && fragment.typeCondition) {
                    typeCondition = fragment.typeCondition.name.value;
                    if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                      return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function(fragmentResult) {
                        resultsToMerge.push(fragmentResult);
                      })];
                    }
                  }
                  return [2];
                });
              });
            };
            return [2, Promise.all(selectionSet.selections.map(execute2)).then(function() {
              return mergeDeepArray(resultsToMerge);
            })];
          });
        });
      };
      LocalState2.prototype.resolveField = function(field, rootValue, execContext) {
        return __awaiter(this, void 0, void 0, function() {
          var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
          var _this = this;
          return __generator(this, function(_a3) {
            variables = execContext.variables;
            fieldName = field.name.value;
            aliasedFieldName = resultKeyNameFromField(field);
            aliasUsed = fieldName !== aliasedFieldName;
            defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
            resultPromise = Promise.resolve(defaultResult);
            if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
              resolverType = rootValue.__typename || execContext.defaultOperationType;
              resolverMap = this.resolvers && this.resolvers[resolverType];
              if (resolverMap) {
                resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
                if (resolve) {
                  resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field, fragmentMap: execContext.fragmentMap }));
                }
              }
            }
            return [2, resultPromise.then(function(result2) {
              if (result2 === void 0) {
                result2 = defaultResult;
              }
              if (field.directives) {
                field.directives.forEach(function(directive) {
                  if (directive.name.value === "export" && directive.arguments) {
                    directive.arguments.forEach(function(arg) {
                      if (arg.name.value === "as" && arg.value.kind === "StringValue") {
                        execContext.exportedVariables[arg.value.value] = result2;
                      }
                    });
                  }
                });
              }
              if (!field.selectionSet) {
                return result2;
              }
              if (result2 == null) {
                return result2;
              }
              if (Array.isArray(result2)) {
                return _this.resolveSubSelectedArray(field, result2, execContext);
              }
              if (field.selectionSet) {
                return _this.resolveSelectionSet(field.selectionSet, result2, execContext);
              }
            })];
          });
        });
      };
      LocalState2.prototype.resolveSubSelectedArray = function(field, result2, execContext) {
        var _this = this;
        return Promise.all(result2.map(function(item) {
          if (item === null) {
            return null;
          }
          if (Array.isArray(item)) {
            return _this.resolveSubSelectedArray(field, item, execContext);
          }
          if (field.selectionSet) {
            return _this.resolveSelectionSet(field.selectionSet, item, execContext);
          }
        }));
      };
      return LocalState2;
    }();
    hasOwnProperty3 = Object.prototype.hasOwnProperty;
    QueryManager = function() {
      function QueryManager2(_a3) {
        var link = _a3.link, _b = _a3.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a3.store, _c = _a3.onBroadcast, onBroadcast = _c === void 0 ? function() {
          return void 0;
        } : _c, _d = _a3.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a3.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a3.localState, assumeImmutableResults = _a3.assumeImmutableResults;
        this.mutationStore = new MutationStore();
        this.queryStore = new QueryStore();
        this.clientAwareness = {};
        this.idCounter = 1;
        this.queries = /* @__PURE__ */ new Map();
        this.fetchQueryRejectFns = /* @__PURE__ */ new Map();
        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();
        this.inFlightLinkObservables = /* @__PURE__ */ new Map();
        this.pollingInfoByQueryId = /* @__PURE__ */ new Map();
        this.link = link;
        this.queryDeduplication = queryDeduplication;
        this.dataStore = store;
        this.onBroadcast = onBroadcast;
        this.clientAwareness = clientAwareness;
        this.localState = localState || new LocalState({ cache: store.getCache() });
        this.ssrMode = ssrMode;
        this.assumeImmutableResults = !!assumeImmutableResults;
      }
      QueryManager2.prototype.stop = function() {
        var _this = this;
        this.queries.forEach(function(_info, queryId) {
          _this.stopQueryNoBroadcast(queryId);
        });
        this.fetchQueryRejectFns.forEach(function(reject) {
          reject(false ? new InvariantError(8) : new InvariantError("QueryManager stopped while query was in flight"));
        });
      };
      QueryManager2.prototype.mutate = function(_a3) {
        var mutation = _a3.mutation, variables = _a3.variables, optimisticResponse = _a3.optimisticResponse, updateQueriesByName = _a3.updateQueries, _b = _a3.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a3.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a3.update, _d = _a3.errorPolicy, errorPolicy = _d === void 0 ? "none" : _d, fetchPolicy = _a3.fetchPolicy, _e = _a3.context, context = _e === void 0 ? {} : _e;
        return __awaiter(this, void 0, void 0, function() {
          var mutationId, generateUpdateQueriesInfo, self2;
          var _this = this;
          return __generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                false ? invariant(mutation, 9) : invariant(mutation, "mutation option is required. You must specify your GraphQL document in the mutation option.");
                false ? invariant(!fetchPolicy || fetchPolicy === "no-cache", 10) : invariant(!fetchPolicy || fetchPolicy === "no-cache", "Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.");
                mutationId = this.generateQueryId();
                mutation = this.transform(mutation).document;
                this.setQuery(mutationId, function() {
                  return { document: mutation };
                });
                variables = this.getVariables(mutation, variables);
                if (!this.transform(mutation).hasClientExports)
                  return [3, 2];
                return [4, this.localState.addExportedVariables(mutation, variables, context)];
              case 1:
                variables = _f.sent();
                _f.label = 2;
              case 2:
                generateUpdateQueriesInfo = function() {
                  var ret = {};
                  if (updateQueriesByName) {
                    _this.queries.forEach(function(_a4, queryId) {
                      var observableQuery = _a4.observableQuery;
                      if (observableQuery) {
                        var queryName = observableQuery.queryName;
                        if (queryName && hasOwnProperty3.call(updateQueriesByName, queryName)) {
                          ret[queryId] = {
                            updater: updateQueriesByName[queryName],
                            query: _this.queryStore.get(queryId)
                          };
                        }
                      }
                    });
                  }
                  return ret;
                };
                this.mutationStore.initMutation(mutationId, mutation, variables);
                this.dataStore.markMutationInit({
                  mutationId,
                  document: mutation,
                  variables,
                  updateQueries: generateUpdateQueriesInfo(),
                  update: updateWithProxyFn,
                  optimisticResponse
                });
                this.broadcastQueries();
                self2 = this;
                return [2, new Promise(function(resolve, reject) {
                  var storeResult;
                  var error;
                  self2.getObservableFromLink(mutation, __assign3(__assign3({}, context), { optimisticResponse }), variables, false).subscribe({
                    next: function(result2) {
                      if (graphQLResultHasError(result2) && errorPolicy === "none") {
                        error = new ApolloError({
                          graphQLErrors: result2.errors
                        });
                        return;
                      }
                      self2.mutationStore.markMutationResult(mutationId);
                      if (fetchPolicy !== "no-cache") {
                        self2.dataStore.markMutationResult({
                          mutationId,
                          result: result2,
                          document: mutation,
                          variables,
                          updateQueries: generateUpdateQueriesInfo(),
                          update: updateWithProxyFn
                        });
                      }
                      storeResult = result2;
                    },
                    error: function(err) {
                      self2.mutationStore.markMutationError(mutationId, err);
                      self2.dataStore.markMutationComplete({
                        mutationId,
                        optimisticResponse
                      });
                      self2.broadcastQueries();
                      self2.setQuery(mutationId, function() {
                        return { document: null };
                      });
                      reject(new ApolloError({
                        networkError: err
                      }));
                    },
                    complete: function() {
                      if (error) {
                        self2.mutationStore.markMutationError(mutationId, error);
                      }
                      self2.dataStore.markMutationComplete({
                        mutationId,
                        optimisticResponse
                      });
                      self2.broadcastQueries();
                      if (error) {
                        reject(error);
                        return;
                      }
                      if (typeof refetchQueries === "function") {
                        refetchQueries = refetchQueries(storeResult);
                      }
                      var refetchQueryPromises = [];
                      if (isNonEmptyArray(refetchQueries)) {
                        refetchQueries.forEach(function(refetchQuery) {
                          if (typeof refetchQuery === "string") {
                            self2.queries.forEach(function(_a4) {
                              var observableQuery = _a4.observableQuery;
                              if (observableQuery && observableQuery.queryName === refetchQuery) {
                                refetchQueryPromises.push(observableQuery.refetch());
                              }
                            });
                          } else {
                            var queryOptions = {
                              query: refetchQuery.query,
                              variables: refetchQuery.variables,
                              fetchPolicy: "network-only"
                            };
                            if (refetchQuery.context) {
                              queryOptions.context = refetchQuery.context;
                            }
                            refetchQueryPromises.push(self2.query(queryOptions));
                          }
                        });
                      }
                      Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function() {
                        self2.setQuery(mutationId, function() {
                          return { document: null };
                        });
                        if (errorPolicy === "ignore" && storeResult && graphQLResultHasError(storeResult)) {
                          delete storeResult.errors;
                        }
                        resolve(storeResult);
                      });
                    }
                  });
                })];
            }
          });
        });
      };
      QueryManager2.prototype.fetchQuery = function(queryId, options, fetchType, fetchMoreForQueryId) {
        return __awaiter(this, void 0, void 0, function() {
          var _a3, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result2, shouldFetch, requestId, cancel, networkResult;
          var _this = this;
          return __generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                _a3 = options.metadata, metadata = _a3 === void 0 ? null : _a3, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? "cache-first" : _b, _c = options.context, context = _c === void 0 ? {} : _c;
                query = this.transform(options.query).document;
                variables = this.getVariables(query, options.variables);
                if (!this.transform(query).hasClientExports)
                  return [3, 2];
                return [4, this.localState.addExportedVariables(query, variables, context)];
              case 1:
                variables = _e.sent();
                _e.label = 2;
              case 2:
                options = __assign3(__assign3({}, options), { variables });
                isNetworkOnly = fetchPolicy === "network-only" || fetchPolicy === "no-cache";
                needToFetch = isNetworkOnly;
                if (!isNetworkOnly) {
                  _d = this.dataStore.getCache().diff({
                    query,
                    variables,
                    returnPartialData: true,
                    optimistic: false
                  }), complete = _d.complete, result2 = _d.result;
                  needToFetch = !complete || fetchPolicy === "cache-and-network";
                  storeResult = result2;
                }
                shouldFetch = needToFetch && fetchPolicy !== "cache-only" && fetchPolicy !== "standby";
                if (hasDirectives(["live"], query))
                  shouldFetch = true;
                requestId = this.idCounter++;
                cancel = fetchPolicy !== "no-cache" ? this.updateQueryWatch(queryId, query, options) : void 0;
                this.setQuery(queryId, function() {
                  return {
                    document: query,
                    lastRequestId: requestId,
                    invalidated: true,
                    cancel
                  };
                });
                this.invalidate(fetchMoreForQueryId);
                this.queryStore.initQuery({
                  queryId,
                  document: query,
                  storePreviousVariables: shouldFetch,
                  variables,
                  isPoll: fetchType === FetchType.poll,
                  isRefetch: fetchType === FetchType.refetch,
                  metadata,
                  fetchMoreForQueryId
                });
                this.broadcastQueries();
                if (shouldFetch) {
                  networkResult = this.fetchRequest({
                    requestId,
                    queryId,
                    document: query,
                    options,
                    fetchMoreForQueryId
                  }).catch(function(error) {
                    if (isApolloError(error)) {
                      throw error;
                    } else {
                      if (requestId >= _this.getQuery(queryId).lastRequestId) {
                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);
                        _this.invalidate(queryId);
                        _this.invalidate(fetchMoreForQueryId);
                        _this.broadcastQueries();
                      }
                      throw new ApolloError({ networkError: error });
                    }
                  });
                  if (fetchPolicy !== "cache-and-network") {
                    return [2, networkResult];
                  }
                  networkResult.catch(function() {
                  });
                }
                this.queryStore.markQueryResultClient(queryId, !shouldFetch);
                this.invalidate(queryId);
                this.invalidate(fetchMoreForQueryId);
                if (this.transform(query).hasForcedResolvers) {
                  return [2, this.localState.runResolvers({
                    document: query,
                    remoteResult: { data: storeResult },
                    context,
                    variables,
                    onlyRunForcedResolvers: true
                  }).then(function(result3) {
                    _this.markQueryResult(queryId, result3, options, fetchMoreForQueryId);
                    _this.broadcastQueries();
                    return result3;
                  })];
                }
                this.broadcastQueries();
                return [2, { data: storeResult }];
            }
          });
        });
      };
      QueryManager2.prototype.markQueryResult = function(queryId, result2, _a3, fetchMoreForQueryId) {
        var fetchPolicy = _a3.fetchPolicy, variables = _a3.variables, errorPolicy = _a3.errorPolicy;
        if (fetchPolicy === "no-cache") {
          this.setQuery(queryId, function() {
            return {
              newData: { result: result2.data, complete: true }
            };
          });
        } else {
          this.dataStore.markQueryResult(result2, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === "ignore" || errorPolicy === "all");
        }
      };
      QueryManager2.prototype.queryListenerForObserver = function(queryId, options, observer) {
        var _this = this;
        function invoke(method, argument) {
          if (observer[method]) {
            try {
              observer[method](argument);
            } catch (e) {
              invariant.error(e);
            }
          } else if (method === "error") {
            invariant.error(argument);
          }
        }
        return function(queryStoreValue, newData) {
          _this.invalidate(queryId, false);
          if (!queryStoreValue)
            return;
          var _a3 = _this.getQuery(queryId), observableQuery = _a3.observableQuery, document = _a3.document;
          var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;
          if (fetchPolicy === "standby")
            return;
          var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);
          var lastResult = observableQuery && observableQuery.getLastResult();
          var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);
          var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === "cache-only" || fetchPolicy === "cache-and-network";
          if (loading && !shouldNotifyIfLoading) {
            return;
          }
          var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);
          var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || "none";
          if (errorPolicy === "none" && hasGraphQLErrors || queryStoreValue.networkError) {
            return invoke("error", new ApolloError({
              graphQLErrors: queryStoreValue.graphQLErrors,
              networkError: queryStoreValue.networkError
            }));
          }
          try {
            var data = void 0;
            var isMissing = void 0;
            if (newData) {
              if (fetchPolicy !== "no-cache" && fetchPolicy !== "network-only") {
                _this.setQuery(queryId, function() {
                  return { newData: null };
                });
              }
              data = newData.result;
              isMissing = !newData.complete;
            } else {
              var lastError = observableQuery && observableQuery.getLastError();
              var errorStatusChanged = errorPolicy !== "none" && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;
              if (lastResult && lastResult.data && !errorStatusChanged) {
                data = lastResult.data;
                isMissing = false;
              } else {
                var diffResult = _this.dataStore.getCache().diff({
                  query: document,
                  variables: queryStoreValue.previousVariables || queryStoreValue.variables,
                  returnPartialData: true,
                  optimistic: true
                });
                data = diffResult.result;
                isMissing = !diffResult.complete;
              }
            }
            var stale = isMissing && !(options.returnPartialData || fetchPolicy === "cache-only");
            var resultFromStore = {
              data: stale ? lastResult && lastResult.data : data,
              loading,
              networkStatus: queryStoreValue.networkStatus,
              stale
            };
            if (errorPolicy === "all" && hasGraphQLErrors) {
              resultFromStore.errors = queryStoreValue.graphQLErrors;
            }
            invoke("next", resultFromStore);
          } catch (networkError) {
            invoke("error", new ApolloError({ networkError }));
          }
        };
      };
      QueryManager2.prototype.transform = function(document) {
        var transformCache = this.transformCache;
        if (!transformCache.has(document)) {
          var cache = this.dataStore.getCache();
          var transformed = cache.transformDocument(document);
          var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));
          var clientQuery = this.localState.clientQuery(transformed);
          var serverQuery = this.localState.serverQuery(forLink);
          var cacheEntry_1 = {
            document: transformed,
            hasClientExports: hasClientExports(transformed),
            hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
            clientQuery,
            serverQuery,
            defaultVars: getDefaultValues(getOperationDefinition(transformed))
          };
          var add = function(doc) {
            if (doc && !transformCache.has(doc)) {
              transformCache.set(doc, cacheEntry_1);
            }
          };
          add(document);
          add(transformed);
          add(clientQuery);
          add(serverQuery);
        }
        return transformCache.get(document);
      };
      QueryManager2.prototype.getVariables = function(document, variables) {
        return __assign3(__assign3({}, this.transform(document).defaultVars), variables);
      };
      QueryManager2.prototype.watchQuery = function(options, shouldSubscribe) {
        if (shouldSubscribe === void 0) {
          shouldSubscribe = true;
        }
        false ? invariant(options.fetchPolicy !== "standby", 11) : invariant(options.fetchPolicy !== "standby", 'client.watchQuery cannot be called with fetchPolicy set to "standby"');
        options.variables = this.getVariables(options.query, options.variables);
        if (typeof options.notifyOnNetworkStatusChange === "undefined") {
          options.notifyOnNetworkStatusChange = false;
        }
        var transformedOptions = __assign3({}, options);
        return new ObservableQuery({
          queryManager: this,
          options: transformedOptions,
          shouldSubscribe
        });
      };
      QueryManager2.prototype.query = function(options) {
        var _this = this;
        false ? invariant(options.query, 12) : invariant(options.query, "query option is required. You must specify your GraphQL document in the query option.");
        false ? invariant(options.query.kind === "Document", 13) : invariant(options.query.kind === "Document", 'You must wrap the query string in a "gql" tag.');
        false ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, "returnPartialData option only supported on watchQuery.");
        false ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, "pollInterval option only supported on watchQuery.");
        return new Promise(function(resolve, reject) {
          var watchedQuery = _this.watchQuery(options, false);
          _this.fetchQueryRejectFns.set("query:" + watchedQuery.queryId, reject);
          watchedQuery.result().then(resolve, reject).then(function() {
            return _this.fetchQueryRejectFns.delete("query:" + watchedQuery.queryId);
          });
        });
      };
      QueryManager2.prototype.generateQueryId = function() {
        return String(this.idCounter++);
      };
      QueryManager2.prototype.stopQueryInStore = function(queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.broadcastQueries();
      };
      QueryManager2.prototype.stopQueryInStoreNoBroadcast = function(queryId) {
        this.stopPollingQuery(queryId);
        this.queryStore.stopQuery(queryId);
        this.invalidate(queryId);
      };
      QueryManager2.prototype.addQueryListener = function(queryId, listener) {
        this.setQuery(queryId, function(_a3) {
          var listeners = _a3.listeners;
          listeners.add(listener);
          return { invalidated: false };
        });
      };
      QueryManager2.prototype.updateQueryWatch = function(queryId, document, options) {
        var _this = this;
        var cancel = this.getQuery(queryId).cancel;
        if (cancel)
          cancel();
        var previousResult = function() {
          var previousResult2 = null;
          var observableQuery = _this.getQuery(queryId).observableQuery;
          if (observableQuery) {
            var lastResult = observableQuery.getLastResult();
            if (lastResult) {
              previousResult2 = lastResult.data;
            }
          }
          return previousResult2;
        };
        return this.dataStore.getCache().watch({
          query: document,
          variables: options.variables,
          optimistic: true,
          previousResult,
          callback: function(newData) {
            _this.setQuery(queryId, function() {
              return { invalidated: true, newData };
            });
          }
        });
      };
      QueryManager2.prototype.addObservableQuery = function(queryId, observableQuery) {
        this.setQuery(queryId, function() {
          return { observableQuery };
        });
      };
      QueryManager2.prototype.removeObservableQuery = function(queryId) {
        var cancel = this.getQuery(queryId).cancel;
        this.setQuery(queryId, function() {
          return { observableQuery: null };
        });
        if (cancel)
          cancel();
      };
      QueryManager2.prototype.clearStore = function() {
        this.fetchQueryRejectFns.forEach(function(reject) {
          reject(false ? new InvariantError(16) : new InvariantError("Store reset while query was in flight (not completed in link chain)"));
        });
        var resetIds = [];
        this.queries.forEach(function(_a3, queryId) {
          var observableQuery = _a3.observableQuery;
          if (observableQuery)
            resetIds.push(queryId);
        });
        this.queryStore.reset(resetIds);
        this.mutationStore.reset();
        return this.dataStore.reset();
      };
      QueryManager2.prototype.resetStore = function() {
        var _this = this;
        return this.clearStore().then(function() {
          return _this.reFetchObservableQueries();
        });
      };
      QueryManager2.prototype.reFetchObservableQueries = function(includeStandby) {
        var _this = this;
        if (includeStandby === void 0) {
          includeStandby = false;
        }
        var observableQueryPromises = [];
        this.queries.forEach(function(_a3, queryId) {
          var observableQuery = _a3.observableQuery;
          if (observableQuery) {
            var fetchPolicy = observableQuery.options.fetchPolicy;
            observableQuery.resetLastResults();
            if (fetchPolicy !== "cache-only" && (includeStandby || fetchPolicy !== "standby")) {
              observableQueryPromises.push(observableQuery.refetch());
            }
            _this.setQuery(queryId, function() {
              return { newData: null };
            });
            _this.invalidate(queryId);
          }
        });
        this.broadcastQueries();
        return Promise.all(observableQueryPromises);
      };
      QueryManager2.prototype.observeQuery = function(queryId, options, observer) {
        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));
        return this.fetchQuery(queryId, options);
      };
      QueryManager2.prototype.startQuery = function(queryId, options, listener) {
        invariant.warn("The QueryManager.startQuery method has been deprecated");
        this.addQueryListener(queryId, listener);
        this.fetchQuery(queryId, options).catch(function() {
          return void 0;
        });
        return queryId;
      };
      QueryManager2.prototype.startGraphQLSubscription = function(_a3) {
        var _this = this;
        var query = _a3.query, fetchPolicy = _a3.fetchPolicy, variables = _a3.variables;
        query = this.transform(query).document;
        variables = this.getVariables(query, variables);
        var makeObservable = function(variables2) {
          return _this.getObservableFromLink(query, {}, variables2, false).map(function(result2) {
            if (!fetchPolicy || fetchPolicy !== "no-cache") {
              _this.dataStore.markSubscriptionResult(result2, query, variables2);
              _this.broadcastQueries();
            }
            if (graphQLResultHasError(result2)) {
              throw new ApolloError({
                graphQLErrors: result2.errors
              });
            }
            return result2;
          });
        };
        if (this.transform(query).hasClientExports) {
          var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);
          return new Observable2(function(observer) {
            var sub = null;
            observablePromise_1.then(function(observable) {
              return sub = observable.subscribe(observer);
            }, observer.error);
            return function() {
              return sub && sub.unsubscribe();
            };
          });
        }
        return makeObservable(variables);
      };
      QueryManager2.prototype.stopQuery = function(queryId) {
        this.stopQueryNoBroadcast(queryId);
        this.broadcastQueries();
      };
      QueryManager2.prototype.stopQueryNoBroadcast = function(queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.removeQuery(queryId);
      };
      QueryManager2.prototype.removeQuery = function(queryId) {
        this.fetchQueryRejectFns.delete("query:" + queryId);
        this.fetchQueryRejectFns.delete("fetchRequest:" + queryId);
        this.getQuery(queryId).subscriptions.forEach(function(x) {
          return x.unsubscribe();
        });
        this.queries.delete(queryId);
      };
      QueryManager2.prototype.getCurrentQueryResult = function(observableQuery, optimistic) {
        if (optimistic === void 0) {
          optimistic = true;
        }
        var _a3 = observableQuery.options, variables = _a3.variables, query = _a3.query, fetchPolicy = _a3.fetchPolicy, returnPartialData = _a3.returnPartialData;
        var lastResult = observableQuery.getLastResult();
        var newData = this.getQuery(observableQuery.queryId).newData;
        if (newData && newData.complete) {
          return { data: newData.result, partial: false };
        }
        if (fetchPolicy === "no-cache" || fetchPolicy === "network-only") {
          return { data: void 0, partial: false };
        }
        var _b = this.dataStore.getCache().diff({
          query,
          variables,
          previousResult: lastResult ? lastResult.data : void 0,
          returnPartialData: true,
          optimistic
        }), result2 = _b.result, complete = _b.complete;
        return {
          data: complete || returnPartialData ? result2 : void 0,
          partial: !complete
        };
      };
      QueryManager2.prototype.getQueryWithPreviousResult = function(queryIdOrObservable) {
        var observableQuery;
        if (typeof queryIdOrObservable === "string") {
          var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;
          false ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, "ObservableQuery with this id doesn't exist: " + queryIdOrObservable);
          observableQuery = foundObserveableQuery;
        } else {
          observableQuery = queryIdOrObservable;
        }
        var _a3 = observableQuery.options, variables = _a3.variables, query = _a3.query;
        return {
          previousResult: this.getCurrentQueryResult(observableQuery, false).data,
          variables,
          document: query
        };
      };
      QueryManager2.prototype.broadcastQueries = function() {
        var _this = this;
        this.onBroadcast();
        this.queries.forEach(function(info, id) {
          if (info.invalidated) {
            info.listeners.forEach(function(listener) {
              if (listener) {
                listener(_this.queryStore.get(id), info.newData);
              }
            });
          }
        });
      };
      QueryManager2.prototype.getLocalState = function() {
        return this.localState;
      };
      QueryManager2.prototype.getObservableFromLink = function(query, context, variables, deduplication) {
        var _this = this;
        if (deduplication === void 0) {
          deduplication = this.queryDeduplication;
        }
        var observable;
        var serverQuery = this.transform(query).serverQuery;
        if (serverQuery) {
          var _a3 = this, inFlightLinkObservables_1 = _a3.inFlightLinkObservables, link = _a3.link;
          var operation = {
            query: serverQuery,
            variables,
            operationName: getOperationName(serverQuery) || void 0,
            context: this.prepareContext(__assign3(__assign3({}, context), { forceFetch: !deduplication }))
          };
          context = operation.context;
          if (deduplication) {
            var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || /* @__PURE__ */ new Map();
            inFlightLinkObservables_1.set(serverQuery, byVariables_1);
            var varJson_1 = JSON.stringify(variables);
            observable = byVariables_1.get(varJson_1);
            if (!observable) {
              byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));
              var cleanup = function() {
                byVariables_1.delete(varJson_1);
                if (!byVariables_1.size)
                  inFlightLinkObservables_1.delete(serverQuery);
                cleanupSub_1.unsubscribe();
              };
              var cleanupSub_1 = observable.subscribe({
                next: cleanup,
                error: cleanup,
                complete: cleanup
              });
            }
          } else {
            observable = multiplex(execute(link, operation));
          }
        } else {
          observable = Observable2.of({ data: {} });
          context = this.prepareContext(context);
        }
        var clientQuery = this.transform(query).clientQuery;
        if (clientQuery) {
          observable = asyncMap(observable, function(result2) {
            return _this.localState.runResolvers({
              document: clientQuery,
              remoteResult: result2,
              context,
              variables
            });
          });
        }
        return observable;
      };
      QueryManager2.prototype.fetchRequest = function(_a3) {
        var _this = this;
        var requestId = _a3.requestId, queryId = _a3.queryId, document = _a3.document, options = _a3.options, fetchMoreForQueryId = _a3.fetchMoreForQueryId;
        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, fetchPolicy = options.fetchPolicy;
        var resultFromStore;
        var errorsFromStore;
        return new Promise(function(resolve, reject) {
          var observable = _this.getObservableFromLink(document, options.context, variables);
          var fqrfId = "fetchRequest:" + queryId;
          _this.fetchQueryRejectFns.set(fqrfId, reject);
          var cleanup = function() {
            _this.fetchQueryRejectFns.delete(fqrfId);
            _this.setQuery(queryId, function(_a4) {
              var subscriptions = _a4.subscriptions;
              subscriptions.delete(subscription);
            });
          };
          var subscription = observable.map(function(result2) {
            if (requestId >= _this.getQuery(queryId).lastRequestId) {
              _this.markQueryResult(queryId, result2, options, fetchMoreForQueryId);
              _this.queryStore.markQueryResult(queryId, result2, fetchMoreForQueryId);
              _this.invalidate(queryId);
              _this.invalidate(fetchMoreForQueryId);
              _this.broadcastQueries();
            }
            if (errorPolicy === "none" && isNonEmptyArray(result2.errors)) {
              return reject(new ApolloError({
                graphQLErrors: result2.errors
              }));
            }
            if (errorPolicy === "all") {
              errorsFromStore = result2.errors;
            }
            if (fetchMoreForQueryId || fetchPolicy === "no-cache") {
              resultFromStore = result2.data;
            } else {
              var _a4 = _this.dataStore.getCache().diff({
                variables,
                query: document,
                optimistic: false,
                returnPartialData: true
              }), result_1 = _a4.result, complete = _a4.complete;
              if (complete || options.returnPartialData) {
                resultFromStore = result_1;
              }
            }
          }).subscribe({
            error: function(error) {
              cleanup();
              reject(error);
            },
            complete: function() {
              cleanup();
              resolve({
                data: resultFromStore,
                errors: errorsFromStore,
                loading: false,
                networkStatus: NetworkStatus.ready,
                stale: false
              });
            }
          });
          _this.setQuery(queryId, function(_a4) {
            var subscriptions = _a4.subscriptions;
            subscriptions.add(subscription);
          });
        });
      };
      QueryManager2.prototype.getQuery = function(queryId) {
        return this.queries.get(queryId) || {
          listeners: /* @__PURE__ */ new Set(),
          invalidated: false,
          document: null,
          newData: null,
          lastRequestId: 1,
          observableQuery: null,
          subscriptions: /* @__PURE__ */ new Set()
        };
      };
      QueryManager2.prototype.setQuery = function(queryId, updater) {
        var prev = this.getQuery(queryId);
        var newInfo = __assign3(__assign3({}, prev), updater(prev));
        this.queries.set(queryId, newInfo);
      };
      QueryManager2.prototype.invalidate = function(queryId, invalidated) {
        if (invalidated === void 0) {
          invalidated = true;
        }
        if (queryId) {
          this.setQuery(queryId, function() {
            return { invalidated };
          });
        }
      };
      QueryManager2.prototype.prepareContext = function(context) {
        if (context === void 0) {
          context = {};
        }
        var newContext = this.localState.prepareContext(context);
        return __assign3(__assign3({}, newContext), { clientAwareness: this.clientAwareness });
      };
      QueryManager2.prototype.checkInFlight = function(queryId) {
        var query = this.queryStore.get(queryId);
        return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;
      };
      QueryManager2.prototype.startPollingQuery = function(options, queryId, listener) {
        var _this = this;
        var pollInterval = options.pollInterval;
        false ? invariant(pollInterval, 18) : invariant(pollInterval, "Attempted to start a polling query without a polling interval.");
        if (!this.ssrMode) {
          var info = this.pollingInfoByQueryId.get(queryId);
          if (!info) {
            this.pollingInfoByQueryId.set(queryId, info = {});
          }
          info.interval = pollInterval;
          info.options = __assign3(__assign3({}, options), { fetchPolicy: "network-only" });
          var maybeFetch_1 = function() {
            var info2 = _this.pollingInfoByQueryId.get(queryId);
            if (info2) {
              if (_this.checkInFlight(queryId)) {
                poll_1();
              } else {
                _this.fetchQuery(queryId, info2.options, FetchType.poll).then(poll_1, poll_1);
              }
            }
          };
          var poll_1 = function() {
            var info2 = _this.pollingInfoByQueryId.get(queryId);
            if (info2) {
              clearTimeout(info2.timeout);
              info2.timeout = setTimeout(maybeFetch_1, info2.interval);
            }
          };
          if (listener) {
            this.addQueryListener(queryId, listener);
          }
          poll_1();
        }
        return queryId;
      };
      QueryManager2.prototype.stopPollingQuery = function(queryId) {
        this.pollingInfoByQueryId.delete(queryId);
      };
      return QueryManager2;
    }();
    DataStore = function() {
      function DataStore2(initialCache) {
        this.cache = initialCache;
      }
      DataStore2.prototype.getCache = function() {
        return this.cache;
      };
      DataStore2.prototype.markQueryResult = function(result2, document, variables, fetchMoreForQueryId, ignoreErrors) {
        if (ignoreErrors === void 0) {
          ignoreErrors = false;
        }
        var writeWithErrors = !graphQLResultHasError(result2);
        if (ignoreErrors && graphQLResultHasError(result2) && result2.data) {
          writeWithErrors = true;
        }
        if (!fetchMoreForQueryId && writeWithErrors) {
          this.cache.write({
            result: result2.data,
            dataId: "ROOT_QUERY",
            query: document,
            variables
          });
        }
      };
      DataStore2.prototype.markSubscriptionResult = function(result2, document, variables) {
        if (!graphQLResultHasError(result2)) {
          this.cache.write({
            result: result2.data,
            dataId: "ROOT_SUBSCRIPTION",
            query: document,
            variables
          });
        }
      };
      DataStore2.prototype.markMutationInit = function(mutation) {
        var _this = this;
        if (mutation.optimisticResponse) {
          var optimistic_1;
          if (typeof mutation.optimisticResponse === "function") {
            optimistic_1 = mutation.optimisticResponse(mutation.variables);
          } else {
            optimistic_1 = mutation.optimisticResponse;
          }
          this.cache.recordOptimisticTransaction(function(c) {
            var orig = _this.cache;
            _this.cache = c;
            try {
              _this.markMutationResult({
                mutationId: mutation.mutationId,
                result: { data: optimistic_1 },
                document: mutation.document,
                variables: mutation.variables,
                updateQueries: mutation.updateQueries,
                update: mutation.update
              });
            } finally {
              _this.cache = orig;
            }
          }, mutation.mutationId);
        }
      };
      DataStore2.prototype.markMutationResult = function(mutation) {
        var _this = this;
        if (!graphQLResultHasError(mutation.result)) {
          var cacheWrites_1 = [{
            result: mutation.result.data,
            dataId: "ROOT_MUTATION",
            query: mutation.document,
            variables: mutation.variables
          }];
          var updateQueries_1 = mutation.updateQueries;
          if (updateQueries_1) {
            Object.keys(updateQueries_1).forEach(function(id) {
              var _a3 = updateQueries_1[id], query = _a3.query, updater = _a3.updater;
              var _b = _this.cache.diff({
                query: query.document,
                variables: query.variables,
                returnPartialData: true,
                optimistic: false
              }), currentQueryResult = _b.result, complete = _b.complete;
              if (complete) {
                var nextQueryResult = tryFunctionOrLogError(function() {
                  return updater(currentQueryResult, {
                    mutationResult: mutation.result,
                    queryName: getOperationName(query.document) || void 0,
                    queryVariables: query.variables
                  });
                });
                if (nextQueryResult) {
                  cacheWrites_1.push({
                    result: nextQueryResult,
                    dataId: "ROOT_QUERY",
                    query: query.document,
                    variables: query.variables
                  });
                }
              }
            });
          }
          this.cache.performTransaction(function(c) {
            cacheWrites_1.forEach(function(write) {
              return c.write(write);
            });
            var update = mutation.update;
            if (update) {
              tryFunctionOrLogError(function() {
                return update(c, mutation.result);
              });
            }
          });
        }
      };
      DataStore2.prototype.markMutationComplete = function(_a3) {
        var mutationId = _a3.mutationId, optimisticResponse = _a3.optimisticResponse;
        if (optimisticResponse) {
          this.cache.removeOptimistic(mutationId);
        }
      };
      DataStore2.prototype.markUpdateQueryResult = function(document, variables, newResult) {
        this.cache.write({
          result: newResult,
          dataId: "ROOT_QUERY",
          variables,
          query: document
        });
      };
      DataStore2.prototype.reset = function() {
        return this.cache.reset();
      };
      return DataStore2;
    }();
    version = "2.6.10";
    hasSuggestedDevtools = false;
    ApolloClient = function() {
      function ApolloClient2(options) {
        var _this = this;
        this.defaultOptions = {};
        this.resetStoreCallbacks = [];
        this.clearStoreCallbacks = [];
        var cache = options.cache, _a3 = options.ssrMode, ssrMode = _a3 === void 0 ? false : _a3, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
        var link = options.link;
        if (!link && resolvers) {
          link = ApolloLink.empty();
        }
        if (!link || !cache) {
          throw false ? new InvariantError(4) : new InvariantError("In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\nThese options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\nFor more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup");
        }
        this.link = link;
        this.cache = cache;
        this.store = new DataStore(cache);
        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
        this.queryDeduplication = queryDeduplication;
        this.defaultOptions = defaultOptions || {};
        this.typeDefs = typeDefs;
        if (ssrForceFetchDelay) {
          setTimeout(function() {
            return _this.disableNetworkFetches = false;
          }, ssrForceFetchDelay);
        }
        this.watchQuery = this.watchQuery.bind(this);
        this.query = this.query.bind(this);
        this.mutate = this.mutate.bind(this);
        this.resetStore = this.resetStore.bind(this);
        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
        var defaultConnectToDevTools = typeof window !== "undefined" && !window.__APOLLO_CLIENT__;
        if (typeof connectToDevTools === "undefined" ? defaultConnectToDevTools : connectToDevTools && typeof window !== "undefined") {
          window.__APOLLO_CLIENT__ = this;
        }
        if (!hasSuggestedDevtools && true) {
          hasSuggestedDevtools = true;
          if (typeof window !== "undefined" && window.document && window.top === window.self) {
            if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("Chrome") > -1) {
                console.debug("Download the Apollo DevTools for a better development experience: https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm");
              }
            }
          }
        }
        this.version = version;
        this.localState = new LocalState({
          cache,
          client: this,
          resolvers,
          fragmentMatcher
        });
        this.queryManager = new QueryManager({
          link: this.link,
          store: this.store,
          queryDeduplication,
          ssrMode,
          clientAwareness: {
            name: clientAwarenessName,
            version: clientAwarenessVersion
          },
          localState: this.localState,
          assumeImmutableResults,
          onBroadcast: function() {
            if (_this.devToolsHookCb) {
              _this.devToolsHookCb({
                action: {},
                state: {
                  queries: _this.queryManager.queryStore.getStore(),
                  mutations: _this.queryManager.mutationStore.getStore()
                },
                dataWithOptimisticResults: _this.cache.extract(true)
              });
            }
          }
        });
      }
      ApolloClient2.prototype.stop = function() {
        this.queryManager.stop();
      };
      ApolloClient2.prototype.watchQuery = function(options) {
        if (this.defaultOptions.watchQuery) {
          options = __assign3(__assign3({}, this.defaultOptions.watchQuery), options);
        }
        if (this.disableNetworkFetches && (options.fetchPolicy === "network-only" || options.fetchPolicy === "cache-and-network")) {
          options = __assign3(__assign3({}, options), { fetchPolicy: "cache-first" });
        }
        return this.queryManager.watchQuery(options);
      };
      ApolloClient2.prototype.query = function(options) {
        if (this.defaultOptions.query) {
          options = __assign3(__assign3({}, this.defaultOptions.query), options);
        }
        false ? invariant(options.fetchPolicy !== "cache-and-network", 5) : invariant(options.fetchPolicy !== "cache-and-network", "The cache-and-network fetchPolicy does not work with client.query, because client.query can only return a single result. Please use client.watchQuery to receive multiple results from the cache and the network, or consider using a different fetchPolicy, such as cache-first or network-only.");
        if (this.disableNetworkFetches && options.fetchPolicy === "network-only") {
          options = __assign3(__assign3({}, options), { fetchPolicy: "cache-first" });
        }
        return this.queryManager.query(options);
      };
      ApolloClient2.prototype.mutate = function(options) {
        if (this.defaultOptions.mutate) {
          options = __assign3(__assign3({}, this.defaultOptions.mutate), options);
        }
        return this.queryManager.mutate(options);
      };
      ApolloClient2.prototype.subscribe = function(options) {
        return this.queryManager.startGraphQLSubscription(options);
      };
      ApolloClient2.prototype.readQuery = function(options, optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }
        return this.cache.readQuery(options, optimistic);
      };
      ApolloClient2.prototype.readFragment = function(options, optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }
        return this.cache.readFragment(options, optimistic);
      };
      ApolloClient2.prototype.writeQuery = function(options) {
        var result2 = this.cache.writeQuery(options);
        this.queryManager.broadcastQueries();
        return result2;
      };
      ApolloClient2.prototype.writeFragment = function(options) {
        var result2 = this.cache.writeFragment(options);
        this.queryManager.broadcastQueries();
        return result2;
      };
      ApolloClient2.prototype.writeData = function(options) {
        var result2 = this.cache.writeData(options);
        this.queryManager.broadcastQueries();
        return result2;
      };
      ApolloClient2.prototype.__actionHookForDevTools = function(cb) {
        this.devToolsHookCb = cb;
      };
      ApolloClient2.prototype.__requestRaw = function(payload) {
        return execute(this.link, payload);
      };
      ApolloClient2.prototype.initQueryManager = function() {
        invariant.warn("Calling the initQueryManager method is no longer necessary, and it will be removed from ApolloClient in version 3.0.");
        return this.queryManager;
      };
      ApolloClient2.prototype.resetStore = function() {
        var _this = this;
        return Promise.resolve().then(function() {
          return _this.queryManager.clearStore();
        }).then(function() {
          return Promise.all(_this.resetStoreCallbacks.map(function(fn) {
            return fn();
          }));
        }).then(function() {
          return _this.reFetchObservableQueries();
        });
      };
      ApolloClient2.prototype.clearStore = function() {
        var _this = this;
        return Promise.resolve().then(function() {
          return _this.queryManager.clearStore();
        }).then(function() {
          return Promise.all(_this.clearStoreCallbacks.map(function(fn) {
            return fn();
          }));
        });
      };
      ApolloClient2.prototype.onResetStore = function(cb) {
        var _this = this;
        this.resetStoreCallbacks.push(cb);
        return function() {
          _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {
            return c !== cb;
          });
        };
      };
      ApolloClient2.prototype.onClearStore = function(cb) {
        var _this = this;
        this.clearStoreCallbacks.push(cb);
        return function() {
          _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {
            return c !== cb;
          });
        };
      };
      ApolloClient2.prototype.reFetchObservableQueries = function(includeStandby) {
        return this.queryManager.reFetchObservableQueries(includeStandby);
      };
      ApolloClient2.prototype.extract = function(optimistic) {
        return this.cache.extract(optimistic);
      };
      ApolloClient2.prototype.restore = function(serializedState) {
        return this.cache.restore(serializedState);
      };
      ApolloClient2.prototype.addResolvers = function(resolvers) {
        this.localState.addResolvers(resolvers);
      };
      ApolloClient2.prototype.setResolvers = function(resolvers) {
        this.localState.setResolvers(resolvers);
      };
      ApolloClient2.prototype.getResolvers = function() {
        return this.localState.getResolvers();
      };
      ApolloClient2.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {
        this.localState.setFragmentMatcher(fragmentMatcher);
      };
      return ApolloClient2;
    }();
    bundle_esm_default2 = ApolloClient;
  }
});

export {
  InvariantError,
  invariant,
  init_invariant_esm,
  equal,
  init_equality_esm,
  storeKeyNameFromField,
  getStoreKeyName,
  argumentsObjectFromField,
  resultKeyNameFromField,
  isField,
  isInlineFragment,
  isIdValue,
  toIdValue,
  isJsonValue,
  getDirectiveInfoFromField,
  shouldInclude,
  getFragmentQueryDocument,
  assign,
  getOperationDefinition,
  getFragmentDefinitions,
  getQueryDefinition,
  getMainDefinition,
  createFragmentMap,
  getDefaultValues,
  addTypenameToDocument,
  canUseWeakMap,
  isProduction,
  isTest,
  maybeDeepFreeze,
  mergeDeepArray,
  init_bundle_esm2 as init_bundle_esm,
  bundle_esm_default,
  fromError,
  ApolloLink,
  bundle_esm_exports,
  init_bundle_esm3 as init_bundle_esm2,
  NetworkStatus,
  ApolloError,
  bundle_esm_exports2,
  init_bundle_esm4 as init_bundle_esm3
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=chunk-L2ZVQ24K.js.map
