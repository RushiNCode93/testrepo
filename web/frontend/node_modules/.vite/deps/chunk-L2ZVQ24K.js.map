{
  "version": 3,
  "sources": ["../../../../../node_modules/ts-invariant/node_modules/tslib/tslib.es6.js", "../../../../../node_modules/ts-invariant/src/invariant.ts", "../../../../../node_modules/@wry/equality/src/equality.ts", "../../../../../node_modules/zen-observable/lib/Observable.js", "../../../../../node_modules/zen-observable/index.js", "../../../../../node_modules/zen-observable-ts/src/zenObservable.ts", "../../../../../node_modules/apollo-link/node_modules/tslib/tslib.es6.js", "../../../../../node_modules/graphql/language/visitor.mjs", "../../../../../node_modules/apollo-utilities/node_modules/tslib/tslib.es6.js", "../../../../../node_modules/fast-json-stable-stringify/index.js", "../../../../../node_modules/apollo-utilities/src/storeUtils.ts", "../../../../../node_modules/apollo-utilities/src/directives.ts", "../../../../../node_modules/apollo-utilities/src/fragments.ts", "../../../../../node_modules/apollo-utilities/src/util/assign.ts", "../../../../../node_modules/apollo-utilities/src/getFromAST.ts", "../../../../../node_modules/apollo-utilities/src/util/filterInPlace.ts", "../../../../../node_modules/apollo-utilities/src/transform.ts", "../../../../../node_modules/apollo-utilities/src/util/canUse.ts", "../../../../../node_modules/apollo-utilities/src/util/cloneDeep.ts", "../../../../../node_modules/apollo-utilities/src/util/environment.ts", "../../../../../node_modules/apollo-utilities/src/util/errorHandling.ts", "../../../../../node_modules/apollo-utilities/src/util/maybeDeepFreeze.ts", "../../../../../node_modules/apollo-utilities/src/util/mergeDeep.ts", "../../../../../node_modules/apollo-utilities/src/util/warnOnce.ts", "../../../../../node_modules/apollo-utilities/src/util/stripSymbols.ts", "../../../../../node_modules/apollo-link/src/linkUtils.ts", "../../../../../node_modules/apollo-link/src/link.ts", "../../../../../node_modules/apollo-client/node_modules/tslib/tslib.es6.js", "../../../../../node_modules/symbol-observable/es/ponyfill.js", "../../../../../node_modules/symbol-observable/es/index.js", "../../../../../node_modules/src/core/networkStatus.ts", "../../../../../node_modules/src/util/Observable.ts", "../../../../../node_modules/src/util/arrays.ts", "../../../../../node_modules/src/errors/ApolloError.ts", "../../../../../node_modules/src/core/types.ts", "../../../../../node_modules/src/core/ObservableQuery.ts", "../../../../../node_modules/src/data/mutations.ts", "../../../../../node_modules/src/data/queries.ts", "../../../../../node_modules/src/util/capitalizeFirstLetter.ts", "../../../../../node_modules/src/core/LocalState.ts", "../../../../../node_modules/src/util/observables.ts", "../../../../../node_modules/src/core/QueryManager.ts", "../../../../../node_modules/src/data/store.ts", "../../../../../node_modules/src/version.ts", "../../../../../node_modules/src/ApolloClient.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(condition: any, message?: string | number) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nfunction wrapConsoleMethod(method: \"warn\" | \"error\") {\n  return function () {\n    return console[method].apply(console, arguments as any);\n  } as (...args: any[]) => void;\n}\n\nexport namespace invariant {\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\nlet processStub: NodeJS.Process = { env: {} } as any;\nexport { processStub as process };\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {\n  // The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\n\nexport default invariant;\n", "const { toString, hasOwnProperty } = Object.prototype;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = Object.keys(a);\n      const bKeys = Object.keys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Observable = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription);\n\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver =\n/*#__PURE__*/\nfunction () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: \"next\",\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: \"error\",\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable =\n/*#__PURE__*/\nfunction () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function (value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function (value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function (value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function (value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscription;\n        var index = 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function (v) {\n              observer.next(v);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              if (index === sources.length) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources[index++]));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n        return function () {\n          if (subscription) {\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        };\n      });\n    }\n  }, {\n    key: \"flatMap\",\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function (value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function (value) {\n                observer.next(value);\n              },\n              error: function (e) {\n                observer.error(e);\n              },\n              complete: function () {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n            subscriptions.push(inner);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: SymbolObservable,\n    value: function () {\n      return this;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n      if (x == null) throw new TypeError(x + ' is not an object');\n      var method = getMethod(x, SymbolObservable);\n\n      if (method) {\n        var observable = method.call(x);\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n        if (isObservable(observable) && observable.constructor === C) return observable;\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, SymbolIterator);\n\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var _item = _step.value;\n                  observer.next(_item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: \"of\",\n    value: function of() {\n      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nexports.Observable = Observable;\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}", "module.exports = require('./lib/Observable.js').Observable;\n", "/* tslint:disable */\n\nimport zenObservable from 'zen-observable';\n\nnamespace Observable {\n\n}\n\nimport { ZenObservable } from './types';\n\nexport { ZenObservable };\n\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\nexport type ObservableLike<T> = ZenObservable.ObservableLike<T>;\n\nexport const Observable: {\n  new <T>(subscriber: Subscriber<T>): Observable<T>;\n  from<R>(\n    observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>,\n  ): Observable<R>;\n  of<R>(...args: Array<R>): Observable<R>;\n} = <any>zenObservable;\n\nexport interface Observable<T> {\n  subscribe(\n    observerOrNext: ((value: T) => void) | ZenObservable.Observer<T>,\n    error?: (error: any) => void,\n    complete?: () => void,\n  ): ZenObservable.Subscription;\n\n  forEach(fn: (value: T) => void): Promise<void>;\n\n  map<R>(fn: (value: T) => R): Observable<R>;\n\n  filter(fn: (value: T) => boolean): Observable<T>;\n\n  reduce<R = T>(\n    fn: (previousValue: R | T, currentValue: T) => R | T,\n    initialValue?: R | T,\n  ): Observable<R | T>;\n\n  flatMap<R>(fn: (value: T) => ZenObservable.ObservableLike<R>): Observable<R>;\n\n  from<R>(\n    observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>,\n  ): Observable<R>;\n  of<R>(...args: Array<R>): Observable<R>;\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "import inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n", "import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n} from 'graphql';\n\nimport stringify from 'fast-json-stable-stringify';\nimport { InvariantError } from 'ts-invariant';\n\nexport interface IdValue {\n  type: 'id';\n  id: string;\n  generated: boolean;\n  typename: string | undefined;\n}\n\nexport interface JsonValue {\n  type: 'json';\n  json: any;\n}\n\nexport type ListValue = Array<null | IdValue>;\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | IdValue\n  | ListValue\n  | JsonValue\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport type ScalarValue = StringValueNode | BooleanValueNode | EnumValueNode;\n\nexport function isScalarValue(value: ValueNode): value is ScalarValue {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\n\nexport type NumberValue = IntValueNode | FloatValueNode;\n\nexport function isNumberValue(value: ValueNode): value is NumberValue {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport function getStoreKeyName(\n  fieldName: string,\n  args?: Object,\n  directives?: Directives,\n): string {\n  if (\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const queryArgs = args as { [key: string]: any };\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = queryArgs[key];\n      });\n\n      return `${directives['connection']['key']}(${JSON.stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${JSON.stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables: Object,\n): Object {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport function isIdValue(idObject: StoreValue): idObject is IdValue {\n  return idObject &&\n    (idObject as IdValue | JsonValue).type === 'id' &&\n    typeof (idObject as IdValue).generated === 'boolean';\n}\n\nexport type IdConfig = {\n  id: string;\n  typename: string | undefined;\n};\n\nexport function toIdValue(\n  idConfig: string | IdConfig,\n  generated = false,\n): IdValue {\n  return {\n    type: 'id',\n    generated,\n    ...(typeof idConfig === 'string'\n      ? { id: idConfig, typename: undefined }\n      : idConfig),\n  };\n}\n\nexport function isJsonValue(jsonObject: StoreValue): jsonObject is JsonValue {\n  return (\n    jsonObject != null &&\n    typeof jsonObject === 'object' &&\n    (jsonObject as IdValue | JsonValue).type === 'json'\n  );\n}\n\nfunction defaultValueFromVariable(node: VariableNode) {\n  throw new InvariantError(`Variable nodes are not supported by valueFromNode`);\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\nexport function valueFromNode(\n  node: ValueNode,\n  onVariable: VariableValue = defaultValueFromVariable,\n): any {\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value, 10);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'ListValue':\n      return node.values.map(v => valueFromNode(v, onVariable));\n    case 'ObjectValue': {\n      const value: { [key: string]: any } = {};\n      for (const field of node.fields) {\n        value[field.name.value] = valueFromNode(field.value, onVariable);\n      }\n      return value;\n    }\n    default:\n      return node.value;\n  }\n}\n", "// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  FieldNode,\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n} from 'graphql';\n\nimport { visit } from 'graphql/language/visitor';\n\nimport { invariant } from 'ts-invariant';\n\nimport { argumentsObjectFromField } from './storeUtils';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function getDirectiveInfoFromField(\n  field: FieldNode,\n  variables: Object,\n): DirectiveInfo {\n  if (field.directives && field.directives.length) {\n    const directiveObj: DirectiveInfo = {};\n    field.directives.forEach((directive: DirectiveNode) => {\n      directiveObj[directive.name.value] = argumentsObjectFromField(\n        directive,\n        variables,\n      );\n    });\n    return directiveObj;\n  }\n  return null;\n}\n\nexport function shouldInclude(\n  selection: SelectionNode,\n  variables: { [name: string]: any } = {},\n): boolean {\n  return getInclusionDirectives(\n    selection.directives,\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(doc: DocumentNode) {\n  const names: string[] = [];\n\n  visit(doc, {\n    Directive(node) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], doc: DocumentNode) {\n  return getDirectiveNames(doc).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  return directives ? directives.filter(isInclusionDirective).map(directive => {\n    const directiveArguments = directive.arguments;\n    const directiveName = directive.name.value;\n\n    invariant(\n      directiveArguments && directiveArguments.length === 1,\n      `Incorrect number of arguments for the @${directiveName} directive.`,\n    );\n\n    const ifArgument = directiveArguments[0];\n    invariant(\n      ifArgument.name && ifArgument.name.value === 'if',\n      `Invalid argument for the @${directiveName} directive.`,\n    );\n\n    const ifValue: ValueNode = ifArgument.value;\n\n    // means it has to be a variable value if this is a valid @skip or @include directive\n    invariant(\n      ifValue &&\n        (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n      `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n    );\n\n    return { directive, ifArgument };\n  }) : [];\n}\n\n", "import { DocumentNode, FragmentDefinitionNode } from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n", "/**\n * Adds the properties of one or more source objects to a target object. Works exactly like\n * `Object.assign`, but as a utility to maintain support for IE 11.\n *\n * @see https://github.com/apollostack/apollo-client/pull/1009\n */\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign<A, B, C, D, E>(\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n): A & B & C & D & E;\nexport function assign(target: any, ...sources: Array<any>): any;\nexport function assign(\n  target: { [key: string]: any },\n  ...sources: Array<{ [key: string]: any }>\n): { [key: string]: any } {\n  sources.forEach(source => {\n    if (typeof source === 'undefined' || source === null) {\n      return;\n    }\n    Object.keys(source).forEach(key => {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}\n", "import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { assign } from './util/assign';\n\nimport { valueToObjectRepresentation, JsonValue } from './storeUtils';\n\nexport function getMutationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode {\n  checkDocument(doc);\n\n  let mutationDef: OperationDefinitionNode | null = doc.definitions.filter(\n    definition =>\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'mutation',\n  )[0] as OperationDefinitionNode;\n\n  invariant(mutationDef, 'Must contain a mutation definition.');\n\n  return mutationDef;\n}\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationDefinitionOrDie(\n  document: DocumentNode,\n): OperationDefinitionNode {\n  const def = getOperationDefinition(document);\n  invariant(def, `GraphQL document is missing an operation`);\n  return def;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n\n  return symTable;\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): { [key: string]: JsonValue } {\n  if (\n    definition &&\n    definition.variableDefinitions &&\n    definition.variableDefinitions.length\n  ) {\n    const defaultValues = definition.variableDefinitions\n      .filter(({ defaultValue }) => defaultValue)\n      .map(\n        ({ variable, defaultValue }): { [key: string]: JsonValue } => {\n          const defaultValueObj: { [key: string]: JsonValue } = {};\n          valueToObjectRepresentation(\n            defaultValueObj,\n            variable.name,\n            defaultValue as ValueNode,\n          );\n\n          return defaultValueObj;\n        },\n      );\n\n    return assign({}, ...defaultValues);\n  }\n\n  return {};\n}\n\n/**\n * Returns the names of all variables declared by the operation.\n */\nexport function variablesInOperation(\n  operation: OperationDefinitionNode,\n): Set<string> {\n  const names = new Set<string>();\n  if (operation.variableDefinitions) {\n    for (const definition of operation.variableDefinitions) {\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}\n", "export function filterInPlace<T>(\n  array: T[],\n  test: (elem: T) => boolean,\n  context?: any,\n): T[] {\n  let target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n", "import {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n} from 'graphql';\nimport { visit } from 'graphql/language/visitor';\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from './util/filterInPlace';\nimport { invariant } from 'ts-invariant';\nimport { isField, isInlineFragment } from './storeUtils';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): boolean {\n  return op.selectionSet.selections.every(\n    selection =>\n      selection.kind === 'FragmentSpread' &&\n      isEmpty(fragments[selection.name.value], fragments),\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll fist check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // docuemnt.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport function addTypenameToDocument(doc: DocumentNode): DocumentNode {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n  nestedCheck = true,\n): boolean {\n  return (\n    selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nexport function getDirectivesFromDocument(\n  directives: GetDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  checkDocument(doc);\n\n  let parentPath: string;\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      SelectionSet: {\n        enter(node, _key, _parent, path) {\n          const currentPath = path.join('-');\n\n          if (\n            !parentPath ||\n            currentPath === parentPath ||\n            !currentPath.startsWith(parentPath)\n          ) {\n            if (node.selections) {\n              const selectionsWithDirectives = node.selections.filter(\n                selection => hasDirectivesInSelection(directives, selection),\n              );\n\n              if (hasDirectivesInSelectionSet(directives, node, false)) {\n                parentPath = currentPath;\n              }\n\n              return {\n                ...node,\n                selections: selectionsWithDirectives,\n              };\n            } else {\n              return null;\n            }\n          }\n        },\n      },\n    }),\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ),\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            node.arguments.forEach(arg => {\n              if (argMatcher(arg)) {\n                argMatchCount += 1;\n              }\n            });\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n", "export const canUseWeakMap = typeof WeakMap === 'function' && !(\n  typeof navigator === 'object' &&\n  navigator.product === 'ReactNative'\n);\n", "const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value, new Map());\n}\n\nfunction cloneDeepHelper<T>(val: T, seen: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n", "export function getEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n\n  // default environment\n  return 'development';\n}\n\nexport function isEnv(env: string): boolean {\n  return getEnv() === env;\n}\n\nexport function isProduction(): boolean {\n  return isEnv('production') === true;\n}\n\nexport function isDevelopment(): boolean {\n  return isEnv('development') === true;\n}\n\nexport function isTest(): boolean {\n  return isEnv('test') === true;\n}\n", "import { ExecutionResult } from 'graphql';\n\nexport function tryFunctionOrLogError(f: Function) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\n\nexport function graphQLResultHasError(result: ExecutionResult) {\n  return result.errors && result.errors.length;\n}\n", "import { isDevelopment, isTest } from './environment';\n\n// Taken (mostly) from https://github.com/substack/deep-freeze to avoid\n// import hassles with rollup.\nfunction deepFreeze(o: any) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n\nexport function maybeDeepFreeze(obj: any) {\n  if (isDevelopment() || isTest()) {\n    // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n    // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n    const symbolIsPolyfilled =\n      typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n  return obj;\n}\n", "const { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || {} as T;\n  const count = sources.length;\n  if (count > 1) {\n    const pastCopies: any[] = [];\n    target = shallowCopyForMerge(target, pastCopies);\n    for (let i = 1; i < count; ++i) {\n      target = mergeHelper(target, sources[i], pastCopies);\n    }\n  }\n  return target;\n}\n\nfunction isObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction mergeHelper(\n  target: any,\n  source: any,\n  pastCopies: any[],\n) {\n  if (isObject(source) && isObject(target)) {\n    // In case the target has been frozen, make an extensible copy so that\n    // we can merge properties into the copy.\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n\n    Object.keys(source).forEach(sourceKey => {\n      const sourceValue = source[sourceKey];\n      if (hasOwnProperty.call(target, sourceKey)) {\n        const targetValue = target[sourceKey];\n        if (sourceValue !== targetValue) {\n          // When there is a key collision, we need to make a shallow copy of\n          // target[sourceKey] so the merge does not modify any source objects.\n          // To avoid making unnecessary copies, we use a simple array to track\n          // past copies, since it's safe to modify copies created earlier in\n          // the merge. We use an array for pastCopies instead of a Map or Set,\n          // since the number of copies should be relatively small, and some\n          // Map/Set polyfills modify their keys.\n          target[sourceKey] = mergeHelper(\n            shallowCopyForMerge(targetValue, pastCopies),\n            sourceValue,\n            pastCopies,\n          );\n        }\n      } else {\n        // If there is no collision, the target can safely share memory with\n        // the source, and the recursion can terminate here.\n        target[sourceKey] = sourceValue;\n      }\n    });\n\n    return target;\n  }\n\n  // If source (or target) is not an object, let source replace target.\n  return source;\n}\n\nfunction shallowCopyForMerge<T>(value: T, pastCopies: any[]): T {\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    pastCopies.indexOf(value) < 0\n  ) {\n    if (Array.isArray(value)) {\n      value = (value as any).slice(0);\n    } else {\n      value = {\n        __proto__: Object.getPrototypeOf(value),\n        ...value,\n      };\n    }\n    pastCopies.push(value);\n  }\n  return value;\n}\n", "import { isProduction, isTest } from './environment';\n\nconst haveWarned = Object.create({});\n\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\nexport function warnOnceInDevelopment(msg: string, type = 'warn') {\n  if (!isProduction() && !haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.warn(msg);\n    }\n  }\n}\n", "/**\n * In order to make assertions easier, this function strips `symbol`'s from\n * the incoming data.\n *\n * This can be handy when running tests against `apollo-client` for example,\n * since it adds `symbol`'s to the data in the store. Jest's `toEqual`\n * function now covers `symbol`'s (https://github.com/facebook/jest/pull/3437),\n * which means all test data used in a `toEqual` comparison would also have to\n * include `symbol`'s, to pass. By stripping `symbol`'s from the cache data\n * we can compare against more simplified test data.\n */\nexport function stripSymbols<T>(data: T): T {\n  return JSON.parse(JSON.stringify(data));\n}\n", "import Observable from 'zen-observable-ts';\n\nimport { GraphQLRequest, Operation } from './types';\nimport { ApolloLink } from './link';\n\nimport { getOperationName } from 'apollo-utilities';\nimport { invariant, InvariantError } from 'ts-invariant';\nexport { getOperationName };\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n\nexport class LinkError extends Error {\n  public link: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport function isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n\n// backwards compat\nexport const makePromise = toPromise;\n\nexport function fromPromise<T>(promise: Promise<T>): Observable<T> {\n  return new Observable<T>(observer => {\n    promise\n      .then((value: T) => {\n        observer.next(value);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n}\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query)\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = next => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: () => getKey(operation),\n  });\n\n  return operation as Operation;\n}\n\nexport function getKey(operation: GraphQLRequest) {\n  // XXX We're assuming here that query and variables will be serialized in\n  // the same order, which might not always be true.\n  const { query, variables, operationName } = operation;\n  return JSON.stringify([operationName, query, variables]);\n}\n", "import Observable from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  GraphQLRequest,\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n} from './types';\n\nimport {\n  validateOperation,\n  isTerminating,\n  LinkError,\n  transformOperation,\n  createOperation,\n} from './linkUtils';\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nexport function empty(): ApolloLink {\n  return new ApolloLink(() => Observable.of());\n}\n\nexport function from(links: ApolloLink[]): ApolloLink {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce((x, y) => x.concat(y));\n}\n\nexport function split(\n  test: (op: Operation) => boolean,\n  left: ApolloLink | RequestHandler,\n  right?: ApolloLink | RequestHandler,\n): ApolloLink {\n  const leftLink = toLink(left);\n  const rightLink = toLink(right || new ApolloLink(passthrough));\n\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(operation => {\n      return test(operation)\n        ? leftLink.request(operation) || Observable.of()\n        : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink((operation, forward) => {\n      return test(operation)\n        ? leftLink.request(operation, forward) || Observable.of()\n        : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}\n\n// join two Links together\nexport const concat = (\n  first: ApolloLink | RequestHandler,\n  second: ApolloLink | RequestHandler,\n) => {\n  const firstLink = toLink(first);\n  if (isTerminating(firstLink)) {\n    invariant.warn(\n      new LinkError(\n        `You are calling concat on a terminating link, which will have no effect`,\n        firstLink,\n      ),\n    );\n    return firstLink;\n  }\n  const nextLink = toLink(second);\n\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(\n      operation =>\n        firstLink.request(\n          operation,\n          op => nextLink.request(op) || Observable.of(),\n        ) || Observable.of(),\n    );\n  } else {\n    return new ApolloLink((operation, forward) => {\n      return (\n        firstLink.request(operation, op => {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of()\n      );\n    });\n  }\n};\n\nexport class ApolloLink {\n  public static empty = empty;\n  public static from = from;\n  public static split = split;\n  public static execute = execute;\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n}\n\nexport function execute(\n  link: ApolloLink,\n  operation: GraphQLRequest,\n): Observable<FetchResult> {\n  return (\n    link.request(\n      createOperation(\n        operation.context,\n        transformOperation(validateOperation(operation)),\n      ),\n    ) || Observable.of()\n  );\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n", "/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n", "/**\n * The current status of a query\u2019s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus: NetworkStatus,\n): boolean {\n  return networkStatus < 7;\n}\n", "// This simplified polyfill attempts to follow the ECMAScript Observable proposal.\n// See https://github.com/zenparsing/es-observable\nimport { Observable as LinkObservable } from 'apollo-link';\n\nexport type Subscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\n\nimport $$observable from 'symbol-observable';\n\n// rxjs interopt\nexport class Observable<T> extends LinkObservable<T> {\n  public [$$observable]() {\n    return this;\n  }\n\n  public ['@@observable' as any]() {\n    return this;\n  }\n}\n", "export function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n", "import { GraphQLError } from 'graphql';\nimport { isNonEmptyArray } from '../util/arrays';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `GraphQL error: ${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      this.message = generateErrorMessage(this);\n    } else {\n      this.message = errorMessage;\n    }\n\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n", "import { FetchResult } from 'apollo-link';\nimport { DocumentNode, GraphQLError } from 'graphql';\n\nimport { QueryStoreValue } from '../data/queries';\nimport { NetworkStatus } from './networkStatus';\nimport { Resolver } from './LocalState';\n\nexport type QueryListener = (\n  queryStoreValue: QueryStoreValue,\n  newData?: any,\n  forceResolvers?: boolean,\n) => void;\n\nexport type OperationVariables = { [key: string]: any };\n\nexport type PureQueryOptions = {\n  query: DocumentNode;\n  variables?: { [key: string]: any };\n  context?: any;\n};\n\nexport type ApolloQueryResult<T> = {\n  data: T;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  stale: boolean;\n};\n\nexport enum FetchType {\n  normal = 1,\n  refetch = 2,\n  poll = 3,\n}\n\n// This is part of the public API, people write these functions in `updateQueries`.\nexport type MutationQueryReducer<T> = (\n  previousResult: Record<string, any>,\n  options: {\n    mutationResult: FetchResult<T>;\n    queryName: string | undefined;\n    queryVariables: Record<string, any>;\n  },\n) => Record<string, any>;\n\nexport type MutationQueryReducersMap<T = { [key: string]: any }> = {\n  [queryName: string]: MutationQueryReducer<T>;\n};\n\nexport interface Resolvers {\n  [key: string]: {\n    [ field: string ]: Resolver;\n  };\n}\n", "import {\n  isEqual,\n  tryFunctionOrLogError,\n  cloneDeep,\n  getOperationDefinition,\n} from 'apollo-utilities';\nimport { GraphQLError } from 'graphql';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable, Observer, Subscription } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, FetchType, OperationVariables } from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ErrorPolicy,\n} from './watchQueryOptions';\n\nimport { QueryStoreValue } from '../data/queries';\n\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isNonEmptyArray } from '../util/arrays';\n\n// XXX remove in the next breaking semver change (3.0)\n// Deprecated, use ApolloCurrentQueryResult\nexport type ApolloCurrentResult<T> = {\n  data: T | {};\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n};\n\nexport type ApolloCurrentQueryResult<T> = {\n  data: T | undefined;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n  stale?: boolean;\n};\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nexport const hasError = (\n  storeValue: QueryStoreValue,\n  policy: ErrorPolicy = 'none',\n) => storeValue && (\n  storeValue.networkError ||\n  (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors))\n);\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public options: WatchQueryOptions<TVariables>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n  /**\n   *\n   * The current value of the variables for this query. Can change.\n   */\n  public variables: TVariables;\n\n  private shouldSubscribe: boolean;\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<Subscription>();\n\n  private lastResult: ApolloQueryResult<TData>;\n  private lastResultSnapshot: ApolloQueryResult<TData>;\n  private lastError: ApolloError;\n\n  constructor({\n    queryManager,\n    options,\n    shouldSubscribe = true,\n  }: {\n    queryManager: QueryManager<any>;\n    options: WatchQueryOptions<TVariables>;\n    shouldSubscribe?: boolean;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) =>\n      this.onSubscribe(observer),\n    );\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.variables = options.variables || ({} as TVariables);\n    this.queryId = queryManager.generateQueryId();\n    this.shouldSubscribe = shouldSubscribe;\n\n    const opDef = getOperationDefinition(options.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n\n    // related classes\n    this.queryManager = queryManager;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  // XXX remove in the next breaking semver change (3.0)\n  // Deprecated, use getCurrentResult()\n  public currentResult(): ApolloCurrentResult<TData> {\n    const result = this.getCurrentResult() as ApolloCurrentResult<TData>;\n    if (result.data === undefined) {\n      result.data = {};\n    }\n    return result;\n  }\n\n  /**\n   * Return the result of the query from the local cache as well as some fetching status\n   * `loading` and `networkStatus` allow to know if a request is in flight\n   * `partial` lets you know if the result from the local cache is complete or partial\n   * @return {data: Object, error: ApolloError, loading: boolean, networkStatus: number, partial: boolean}\n   */\n  public getCurrentResult(): ApolloCurrentQueryResult<TData> {\n    if (this.isTornDown) {\n      const { lastResult } = this;\n      return {\n        data: !this.lastError && lastResult && lastResult.data || void 0,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      };\n    }\n\n    const { data, partial } = this.queryManager.getCurrentQueryResult(this);\n    const queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n    let result: ApolloQueryResult<TData>;\n\n    const { fetchPolicy } = this.options;\n\n    const isNetworkFetchPolicy =\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache';\n\n    if (queryStoreValue) {\n      const { networkStatus } = queryStoreValue;\n\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return {\n          data: void 0,\n          loading: false,\n          networkStatus,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError,\n          }),\n        };\n      }\n\n      // Variables might have been added dynamically at query time, when\n      // using `@client @export(as: \"varname\")` for example. When this happens,\n      // the variables have been updated in the query store, but not updated on\n      // the original `ObservableQuery`. We'll update the observable query\n      // variables here to match, so retrieving from the cache doesn't fail.\n      if (queryStoreValue.variables) {\n        this.options.variables = {\n          ...this.options.variables,\n          ...(queryStoreValue.variables as TVariables),\n        };\n        this.variables = this.options.variables;\n      }\n\n      result = {\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n      } as ApolloQueryResult<TData>;\n\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n\n    } else {\n      // We need to be careful about the loading state we show to the user, to try\n      // and be vaguely in line with what the user would have seen from .subscribe()\n      // but to still provide useful information synchronously when the query\n      // will not end up hitting the server.\n      // See more: https://github.com/apollostack/apollo-client/issues/707\n      // Basically: is there a query in flight right now (modolo the next tick)?\n      const loading = isNetworkFetchPolicy ||\n        (partial && fetchPolicy !== 'cache-only');\n\n      result = {\n        data,\n        loading,\n        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n      } as ApolloQueryResult<TData>;\n    }\n\n    if (!partial) {\n      this.updateLastResult({ ...result, stale: false });\n    }\n\n    return { ...result, partial };\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    const { lastResultSnapshot: snapshot } = this;\n    return !(\n      snapshot &&\n      newResult &&\n      snapshot.networkStatus === newResult.networkStatus &&\n      snapshot.stale === newResult.stale &&\n      isEqual(snapshot.data, newResult.data)\n    );\n  }\n\n  // Returns the last result that observer.next was called with. This is not the same as\n  // getCurrentResult! If you're not sure which you need, then you probably need getCurrentResult.\n  public getLastResult(): ApolloQueryResult<TData> {\n    return this.lastResult;\n  }\n\n  public getLastError(): ApolloError {\n    return this.lastError;\n  }\n\n  public resetLastResults(): void {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    const queryStore = this.queryManager.queryStore.get(this.queryId);\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: TVariables): Promise<ApolloQueryResult<TData>> {\n    let { fetchPolicy } = this.options;\n    // early return if trying to read from cache during refetch\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new InvariantError(\n        'cache-only fetchPolicy option should not be used together with query refetch.',\n      ));\n    }\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    if (fetchPolicy !== 'no-cache' &&\n        fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      // update observable variables\n      this.variables = {\n        ...this.variables,\n        ...variables,\n      };\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      // Update the existing options with new variables\n      this.options.variables = {\n        ...this.options.variables,\n        ...this.variables,\n      };\n    }\n\n    return this.queryManager.fetchQuery(\n      this.queryId,\n      { ...this.options, fetchPolicy },\n      FetchType.refetch,\n    ) as Promise<ApolloQueryResult<TData>>;\n  }\n\n  public fetchMore<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    // early return if no update Query\n    invariant(\n      fetchMoreOptions.updateQuery,\n      'updateQuery option is required. This function defines how to update the query data with the new results.',\n    );\n\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      fetchPolicy: 'network-only',\n    } as WatchQueryOptions;\n\n    const qid = this.queryManager.generateQueryId();\n\n    return this.queryManager\n      .fetchQuery(\n        qid,\n        combinedOptions,\n        FetchType.normal,\n        this.queryId,\n      )\n      .then(\n        fetchMoreResult => {\n          this.updateQuery((previousResult: any) =>\n            fetchMoreOptions.updateQuery(previousResult, {\n              fetchMoreResult: fetchMoreResult.data as TData,\n              variables: combinedOptions.variables as TVariables,\n            }),\n          );\n          this.queryManager.stopQuery(qid);\n          return fetchMoreResult as ApolloQueryResult<TData>;\n        },\n        error => {\n          this.queryManager.stopQuery(qid);\n          throw error;\n        },\n      );\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  // Note: if the query is not active (there are no subscribers), the promise\n  // will return null immediately.\n  public setOptions(\n    opts: WatchQueryOptions,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    const { fetchPolicy: oldFetchPolicy } = this.options;\n    this.options = {\n      ...this.options,\n      ...opts,\n    } as WatchQueryOptions<TVariables>;\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    const { fetchPolicy } = opts;\n\n    return this.setVariables(\n      this.options.variables as TVariables,\n      // Try to fetch the query if fetchPolicy changed from either cache-only\n      // or standby to something else, or changed to network-only.\n      oldFetchPolicy !== fetchPolicy && (\n        oldFetchPolicy === 'cache-only' ||\n        oldFetchPolicy === 'standby' ||\n        fetchPolicy === 'network-only'\n      ),\n      opts.fetchResults,\n    );\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   *\n   * @param fetchResults: Option to ignore fetching results when updating variables\n   */\n  public setVariables(\n    variables: TVariables,\n    tryFetch: boolean = false,\n    fetchResults = true,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    // since setVariables restarts the subscription, we reset the tornDown status\n    this.isTornDown = false;\n\n    variables = variables || this.variables;\n\n    if (!tryFetch && isEqual(variables, this.variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size && fetchResults\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.variables = this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    // Use the same options as before, but with new variables\n    return this.queryManager.fetchQuery(\n      this.queryId,\n      this.options,\n    ) as Promise<ApolloQueryResult<TData>>;\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const {\n      previousResult,\n      variables,\n      document,\n    } = queryManager.getQueryWithPreviousResult<TData, TVars>(\n      this.queryId,\n    );\n\n    const newResult = tryFunctionOrLogError(() =>\n      mapFn(previousResult, { variables }),\n    );\n\n    if (newResult) {\n      queryManager.dataStore.markUpdateQueryResult(\n        document,\n        variables,\n        newResult,\n      );\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public stopPolling() {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  }\n\n  public startPolling(pollInterval: number) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  }\n\n  private updateLastResult(newResult: ApolloQueryResult<TData>) {\n    const previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n      ? newResult\n      : cloneDeep(newResult);\n    return previousResult;\n  }\n\n  private onSubscribe(observer: Observer<ApolloQueryResult<TData>>) {\n    // Zen Observable has its own error function, so in order to log correctly\n    // we need to provide a custom error callback.\n    try {\n      var subObserver = (observer as any)._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch {}\n\n    const first = !this.observers.size;\n    this.observers.add(observer);\n\n    // Deliver initial result\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    // setup the query if it hasn't been done before\n    if (first) {\n      this.setUpQuery();\n    }\n\n    return () => {\n      if (this.observers.delete(observer) && !this.observers.size) {\n        this.tearDownQuery();\n      }\n    };\n  }\n\n  private setUpQuery() {\n    const { queryManager, queryId } = this;\n\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery<TData>(queryId, this);\n    }\n\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n\n    const onError = (error: ApolloError) => {\n      // Since we don't get the current result on errors, only the error, we\n      // must mirror the updates that occur in QueryStore.markQueryError here\n      this.updateLastResult({\n        ...this.lastResult,\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false,\n      });\n      iterateObserversSafely(this.observers, 'error', this.lastError = error);\n    };\n\n    queryManager.observeQuery<TData>(queryId, this.options, {\n      next: (result: ApolloQueryResult<TData>) => {\n        if (this.lastError || this.isDifferentFromLastResult(result)) {\n          const previousResult = this.updateLastResult(result);\n          const { query, variables, fetchPolicy } = this.options;\n\n          // Before calling `next` on each observer, we need to first see if\n          // the query is using `@client @export` directives, and update\n          // any variables that might have changed. If `@export` variables have\n          // changed, and the query is calling against both local and remote\n          // data, a refetch is needed to pull in new data, using the\n          // updated `@export` variables.\n          if (queryManager.transform(query).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(\n              query,\n              variables,\n            ).then((variables: TVariables) => {\n              const previousVariables = this.variables;\n              this.variables = this.options.variables = variables;\n              if (\n                !result.loading &&\n                previousResult &&\n                fetchPolicy !== 'cache-only' &&\n                queryManager.transform(query).serverQuery &&\n                !isEqual(previousVariables, variables)\n              ) {\n                this.refetch();\n              } else {\n                iterateObserversSafely(this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError,\n    }).catch(onError);\n  }\n\n  private tearDownQuery() {\n    const { queryManager } = this;\n\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n\n    this.observers.clear();\n  }\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nfunction iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n\nfunction assertNotCacheFirstOrOnly<TData, TVariables>(\n  obsQuery: ObservableQuery<TData, TVariables>,\n) {\n  const { fetchPolicy } = obsQuery.options;\n  invariant(\n    fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only',\n    'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.',\n  );\n}\n", "import { DocumentNode } from 'graphql';\n\nexport class MutationStore {\n  private store: { [mutationId: string]: MutationStoreValue } = {};\n\n  public getStore(): { [mutationId: string]: MutationStoreValue } {\n    return this.store;\n  }\n\n  public get(mutationId: string): MutationStoreValue {\n    return this.store[mutationId];\n  }\n\n  public initMutation(\n    mutationId: string,\n    mutation: DocumentNode,\n    variables: Object | undefined,\n  ) {\n    this.store[mutationId] = {\n      mutation,\n      variables: variables || {},\n      loading: true,\n      error: null,\n    };\n  }\n\n  public markMutationError(mutationId: string, error: Error) {\n    const mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = error;\n    }\n  }\n\n  public markMutationResult(mutationId: string) {\n    const mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = null;\n    }\n  }\n\n  public reset() {\n    this.store = {};\n  }\n}\n\nexport interface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Object;\n  loading: boolean;\n  error: Error | null;\n}\n", "import { DocumentNode, GraphQLError, ExecutionResult } from 'graphql';\nimport { isEqual } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\nimport { NetworkStatus } from '../core/networkStatus';\nimport { isNonEmptyArray } from '../util/arrays';\n\nexport type QueryStoreValue = {\n  document: DocumentNode;\n  variables: Object;\n  previousVariables?: Object | null;\n  networkStatus: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  metadata: any;\n};\n\nexport class QueryStore {\n  private store: { [queryId: string]: QueryStoreValue } = {};\n\n  public getStore(): { [queryId: string]: QueryStoreValue } {\n    return this.store;\n  }\n\n  public get(queryId: string): QueryStoreValue {\n    return this.store[queryId];\n  }\n\n  public initQuery(query: {\n    queryId: string;\n    document: DocumentNode;\n    storePreviousVariables: boolean;\n    variables: Object;\n    isPoll: boolean;\n    isRefetch: boolean;\n    metadata: any;\n    fetchMoreForQueryId: string | undefined;\n  }) {\n    const previousQuery = this.store[query.queryId];\n\n    // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.\n    // we should implement a separate action for refetching so that QUERY_INIT may never overwrite\n    // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)\n    invariant(\n      !previousQuery ||\n      previousQuery.document === query.document ||\n      isEqual(previousQuery.document, query.document),\n      'Internal Error: may not update existing query string in store',\n    );\n\n    let isSetVariables = false;\n\n    let previousVariables: Object | null = null;\n    if (\n      query.storePreviousVariables &&\n      previousQuery &&\n      previousQuery.networkStatus !== NetworkStatus.loading\n      // if the previous query was still loading, we don't want to remember it at all.\n    ) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    // TODO break this out into a separate function\n    let networkStatus;\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n      // TODO: can we determine setVariables here if it's a refetch and the variables have changed?\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    let graphQLErrors: ReadonlyArray<GraphQLError> = [];\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite\n    // the store. We probably want a refetch action instead, because I suspect that if you refetch\n    // before the initial fetch is done, you'll get an error.\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus,\n      metadata: query.metadata,\n    };\n\n    // If the action had a `moreForQueryId` property then we need to set the\n    // network status on that query as well to `fetchMore`.\n    //\n    // We have a complement to this if statement in the query result and query\n    // error action branch, but importantly *not* in the client result branch.\n    // This is because the implementation of `fetchMore` *always* sets\n    // `fetchPolicy` to `network-only` so we would never have a client result.\n    if (\n      typeof query.fetchMoreForQueryId === 'string' &&\n      this.store[query.fetchMoreForQueryId]\n    ) {\n      this.store[query.fetchMoreForQueryId].networkStatus =\n        NetworkStatus.fetchMore;\n    }\n  }\n\n  public markQueryResult(\n    queryId: string,\n    result: ExecutionResult,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (\n      typeof fetchMoreForQueryId === 'string' &&\n      this.store[fetchMoreForQueryId]\n    ) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  }\n\n  public markQueryError(\n    queryId: string,\n    error: Error,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  }\n\n  public markQueryResultClient(queryId: string, complete: boolean) {\n    const storeValue = this.store && this.store[queryId];\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  }\n\n  public stopQuery(queryId: string) {\n    delete this.store[queryId];\n  }\n\n  public reset(observableQueryIds: string[]) {\n    Object.keys(this.store).forEach(queryId => {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        this.stopQuery(queryId);\n      } else {\n        // XXX set loading to true so listeners don't trigger unless they want results with partial data\n        this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  }\n}\n", "export function capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n", "import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n} from 'graphql';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nimport { ApolloCache } from 'apollo-cache';\nimport {\n  getMainDefinition,\n  buildQueryFromSelectionSet,\n  hasDirectives,\n  removeClientSetsFromDocument,\n  mergeDeep,\n  mergeDeepArray,\n  FragmentMap,\n  argumentsObjectFromField,\n  resultKeyNameFromField,\n  getFragmentDefinitions,\n  createFragmentMap,\n  shouldInclude,\n  isField,\n  isInlineFragment,\n} from 'apollo-utilities';\nimport { FetchResult } from 'apollo-link';\n\nimport { invariant } from 'ts-invariant';\n\nimport ApolloClient from '../ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { capitalizeFirstLetter } from '../util/capitalizeFirstLetter';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n      invariant.warn(\n        'Found @client directives in a query but no ApolloClient resolvers ' +\n        'were specified. This means ApolloClient local resolver handling ' +\n        'has been disabled, and @client directives will be passed through ' +\n        'to your link chain.',\n      );\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  }\n\n  public prepareContext(context = {}) {\n    const { cache } = this;\n\n    const newContext = {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey: (obj: { __typename: string; id: string | number }) => {\n        if ((cache as any).config) {\n          return (cache as any).config.dataIdFromObject(obj);\n        } else {\n          invariant(false,\n            'To use context.getCacheKey, you need to use a cache that has ' +\n              'a configurable dataIdFromObject, like apollo-cache-inmemory.',\n          );\n        }\n      },\n    };\n\n    return newContext;\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? capitalizeFirstLetter(definitionOperation)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(resolve(\n            rootValue,\n            argumentsObjectFromField(field, variables),\n            execContext.context,\n            { field, fragmentMap: execContext.fragmentMap },\n          ));\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n", "import { Observable, Observer, Subscription } from './Observable';\n\n// Returns a normal Observable that can have any number of subscribers,\n// while ensuring the original Observable gets subscribed to at most once.\nexport function multiplex<T>(inner: Observable<T>): Observable<T> {\n  const observers = new Set<Observer<T>>();\n  let sub: Subscription | null = null;\n  return new Observable<T>(observer => {\n    observers.add(observer);\n    sub = sub || inner.subscribe({\n      next(value) {\n        observers.forEach(obs => obs.next && obs.next(value));\n      },\n      error(error) {\n        observers.forEach(obs => obs.error && obs.error(error));\n      },\n      complete() {\n        observers.forEach(obs => obs.complete && obs.complete());\n      },\n    });\n    return () => {\n      if (observers.delete(observer) && !observers.size && sub) {\n        sub.unsubscribe();\n        sub = null;\n      }\n    };\n  });\n}\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | Promise<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeNextCount = 0;\n    let completed = false;\n\n    const handler: Observer<V> = {\n      next(value) {\n        ++activeNextCount;\n        new Promise(resolve => {\n          resolve(mapFn(value));\n        }).then(\n          result => {\n            --activeNextCount;\n            next && next.call(observer, result);\n            completed && handler.complete!();\n          },\n          e => {\n            --activeNextCount;\n            error && error.call(observer, e);\n          },\n        );\n      },\n      error(e) {\n        error && error.call(observer, e);\n      },\n      complete() {\n        completed = true;\n        if (!activeNextCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n", "import { execute, ApolloLink, FetchResult } from 'apollo-link';\nimport { DocumentNode } from 'graphql';\nimport { Cache } from 'apollo-cache';\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasDirectives,\n  graphQLResultHasError,\n  hasClientExports,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n} from 'apollo-utilities';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observer, Subscription, Observable } from '../util/Observable';\nimport { QueryWithUpdater, DataStore } from '../data/store';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore, QueryStoreValue } from '../data/queries';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  QueryListener,\n  ApolloQueryResult,\n  FetchType,\n  OperationVariables,\n} from './types';\nimport { LocalState } from './LocalState';\nimport { asyncMap, multiplex } from '../util/observables';\nimport { isNonEmptyArray } from '../util/arrays';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport interface QueryInfo {\n  listeners: Set<QueryListener>;\n  invalidated: boolean;\n  newData: Cache.DiffResult<any> | null;\n  document: DocumentNode | null;\n  lastRequestId: number;\n  // A map going from queryId to an observer for a query issued by watchQuery. We use\n  // these to keep track of queries that are inflight and error on the observers associated\n  // with them in case of some destabalizing action (e.g. reset of the Apollo store).\n  observableQuery: ObservableQuery<any> | null;\n  subscriptions: Set<Subscription>;\n  cancel?: () => void;\n}\n\nexport class QueryManager<TStore> {\n  public link: ApolloLink;\n  public mutationStore: MutationStore = new MutationStore();\n  public queryStore: QueryStore = new QueryStore();\n  public dataStore: DataStore<TStore>;\n  public readonly assumeImmutableResults: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast: () => void;\n\n  private ssrMode: boolean;\n\n  // let's not start at zero to avoid pain with bad checks\n  private idCounter = 1;\n\n  // XXX merge with ObservableQuery but that needs to be expanded to support mutations and\n  // subscriptions as well\n  private queries: Map<string, QueryInfo> = new Map();\n\n  // A map of Promise reject functions for fetchQuery promises that have not\n  // yet been resolved, used to keep track of in-flight queries so that we can\n  // reject them in case a destabilizing event occurs (e.g. Apollo store reset).\n  // The key is in the format of `query:${queryId}` or `fetchRequest:${queryId}`,\n  // depending on where the promise's rejection function was created from.\n  private fetchQueryRejectFns = new Map<string, Function>();\n\n  constructor({\n    link,\n    queryDeduplication = false,\n    store,\n    onBroadcast = () => undefined,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    store: DataStore<TStore>;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache: store.getCache() });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(\n        new InvariantError('QueryManager stopped while query was in flight'),\n      );\n    });\n  }\n\n  public async mutate<T>({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries: updateQueriesByName,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    errorPolicy = 'none',\n    fetchPolicy,\n    context = {},\n  }: MutationOptions): Promise<FetchResult<T>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      !fetchPolicy || fetchPolicy === 'no-cache',\n      \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\"\n    );\n\n    const mutationId = this.generateQueryId();\n    mutation = this.transform(mutation).document;\n\n    this.setQuery(mutationId, () => ({ document: mutation }));\n\n    variables = this.getVariables(mutation, variables);\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context);\n    }\n\n    // Create a map of update queries by id to the query instead of by name.\n    const generateUpdateQueriesInfo: () => {\n      [queryId: string]: QueryWithUpdater;\n    } = () => {\n      const ret: { [queryId: string]: QueryWithUpdater } = {};\n\n      if (updateQueriesByName) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          if (observableQuery) {\n            const { queryName } = observableQuery;\n            if (\n              queryName &&\n              hasOwnProperty.call(updateQueriesByName, queryName)\n            ) {\n              ret[queryId] = {\n                updater: updateQueriesByName[queryName],\n                query: this.queryStore.get(queryId),\n              };\n            }\n          }\n        });\n      }\n\n      return ret;\n    };\n\n    this.mutationStore.initMutation(\n      mutationId,\n      mutation,\n      variables,\n    );\n\n    this.dataStore.markMutationInit({\n      mutationId,\n      document: mutation,\n      variables,\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse,\n    });\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      let storeResult: FetchResult<T> | null;\n      let error: ApolloError;\n\n      self.getObservableFromLink(\n        mutation,\n        {\n          ...context,\n          optimisticResponse,\n        },\n        variables,\n        false,\n      ).subscribe({\n        next(result: FetchResult<T>) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors,\n            });\n            return;\n          }\n\n          self.mutationStore.markMutationResult(mutationId);\n\n          if (fetchPolicy !== 'no-cache') {\n            self.dataStore.markMutationResult({\n              mutationId,\n              result,\n              document: mutation,\n              variables,\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n            });\n          }\n\n          storeResult = result;\n        },\n\n        error(err: Error) {\n          self.mutationStore.markMutationError(mutationId, err);\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n          self.broadcastQueries();\n          self.setQuery(mutationId, () => ({ document: null }));\n          reject(\n            new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n\n        complete() {\n          if (error) {\n            self.mutationStore.markMutationError(mutationId, error);\n          }\n\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n\n          self.broadcastQueries();\n\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          // allow for conditional refetches\n          // XXX do we want to make this the only API one day?\n          if (typeof refetchQueries === 'function') {\n            refetchQueries = refetchQueries(storeResult!);\n          }\n\n          const refetchQueryPromises: Promise<\n            ApolloQueryResult<any>[] | ApolloQueryResult<{}>\n          >[] = [];\n\n          if (isNonEmptyArray(refetchQueries)) {\n            refetchQueries.forEach(refetchQuery => {\n              if (typeof refetchQuery === 'string') {\n                self.queries.forEach(({ observableQuery }) => {\n                  if (\n                    observableQuery &&\n                    observableQuery.queryName === refetchQuery\n                  ) {\n                    refetchQueryPromises.push(observableQuery.refetch());\n                  }\n                });\n              } else {\n                const queryOptions: QueryOptions = {\n                  query: refetchQuery.query,\n                  variables: refetchQuery.variables,\n                  fetchPolicy: 'network-only',\n                };\n\n                if (refetchQuery.context) {\n                  queryOptions.context = refetchQuery.context;\n                }\n\n                refetchQueryPromises.push(self.query(queryOptions));\n              }\n            });\n          }\n\n          Promise.all(\n            awaitRefetchQueries ? refetchQueryPromises : [],\n          ).then(() => {\n            self.setQuery(mutationId, () => ({ document: null }));\n\n            if (\n              errorPolicy === 'ignore' &&\n              storeResult &&\n              graphQLResultHasError(storeResult)\n            ) {\n              delete storeResult.errors;\n            }\n\n            resolve(storeResult!);\n          });\n        },\n      });\n    });\n  }\n\n  public async fetchQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    fetchType?: FetchType,\n    // This allows us to track if this is a query spawned by a `fetchMore`\n    // call for another query. We need this data to compute the `fetchMore`\n    // network status for the query this is fetching for.\n    fetchMoreForQueryId?: string,\n  ): Promise<FetchResult<T>> {\n    const {\n      metadata = null,\n      fetchPolicy = 'cache-first', // cache-first is the default fetch policy.\n      context = {},\n    } = options;\n\n    const query = this.transform(options.query).document;\n\n    let variables = this.getVariables(query, options.variables);\n\n    if (this.transform(query).hasClientExports) {\n      variables = await this.localState.addExportedVariables(query, variables, context);\n    }\n\n    options = { ...options, variables };\n\n    let storeResult: any;\n    const isNetworkOnly =\n      fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    let needToFetch = isNetworkOnly;\n\n    // Unless we are completely skipping the cache, we want to diff the query\n    // against the cache before we fetch it from the network interface.\n    if (!isNetworkOnly) {\n      const { complete, result } = this.dataStore.getCache().diff({\n        query,\n        variables,\n        returnPartialData: true,\n        optimistic: false,\n      });\n\n      // If we're in here, only fetch if we have missing fields\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    let shouldFetch =\n      needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n\n    // we need to check to see if this is an operation that uses the @live directive\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n\n    const requestId = this.idCounter++;\n\n    // set up a watcher to listen to cache updates\n    const cancel = fetchPolicy !== 'no-cache'\n      ? this.updateQueryWatch(queryId, query, options)\n      : undefined;\n\n    // Initialize query in store with unique requestId\n    this.setQuery(queryId, () => ({\n      document: query,\n      lastRequestId: requestId,\n      invalidated: true,\n      cancel,\n    }));\n\n    this.invalidate(fetchMoreForQueryId);\n\n    this.queryStore.initQuery({\n      queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata,\n      fetchMoreForQueryId,\n    });\n\n    this.broadcastQueries();\n\n    if (shouldFetch) {\n      const networkResult = this.fetchRequest<T>({\n        requestId,\n        queryId,\n        document: query,\n        options,\n        fetchMoreForQueryId,\n      }).catch(error => {\n        // This is for the benefit of `refetch` promises, which currently don't get their errors\n        // through the store like watchQuery observers do\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          if (requestId >= this.getQuery(queryId).lastRequestId) {\n            this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n            this.invalidate(queryId);\n            this.invalidate(fetchMoreForQueryId);\n            this.broadcastQueries();\n          }\n          throw new ApolloError({ networkError: error });\n        }\n      });\n\n      // we don't return the promise for cache-and-network since it is already\n      // returned below from the cache\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      }\n\n      // however we need to catch the error so it isn't unhandled in case of\n      // network error\n      networkResult.catch(() => {});\n    }\n\n    // If there is no part of the query we need to fetch from the server (or,\n    // fetchPolicy is cache-only), we just write the store result as the final result.\n    this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n    this.invalidate(queryId);\n    this.invalidate(fetchMoreForQueryId);\n\n    if (this.transform(query).hasForcedResolvers) {\n      return this.localState.runResolvers({\n        document: query,\n        remoteResult: { data: storeResult },\n        context,\n        variables,\n        onlyRunForcedResolvers: true,\n      }).then((result: FetchResult<T>) => {\n        this.markQueryResult(\n          queryId,\n          result,\n          options,\n          fetchMoreForQueryId,\n        );\n        this.broadcastQueries();\n        return result;\n      });\n    }\n\n    this.broadcastQueries();\n\n    // If we have no query to send to the server, we should return the result\n    // found within the store.\n    return { data: storeResult };\n  }\n\n  private markQueryResult<TData>(\n    queryId: string,\n    result: FetchResult<TData>,\n    {\n      fetchPolicy,\n      variables,\n      errorPolicy,\n    }: WatchQueryOptions,\n    fetchMoreForQueryId?: string,\n  ) {\n    if (fetchPolicy === 'no-cache') {\n      this.setQuery(queryId, () => ({\n        newData: { result: result.data, complete: true },\n      }));\n    } else {\n      this.dataStore.markQueryResult(\n        result,\n        this.getQuery(queryId).document!,\n        variables,\n        fetchMoreForQueryId,\n        errorPolicy === 'ignore' || errorPolicy === 'all',\n      );\n    }\n  }\n\n  // Returns a query listener that will update the given observer based on the\n  // results (or lack thereof) for a particular query.\n  public queryListenerForObserver<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ): QueryListener {\n    function invoke(method: 'next' | 'error', argument: any) {\n      if (observer[method]) {\n        try {\n          observer[method]!(argument);\n        } catch (e) {\n          invariant.error(e);\n        }\n      } else if (method === 'error') {\n        invariant.error(argument);\n      }\n    }\n\n    return (\n      queryStoreValue: QueryStoreValue,\n      newData?: Cache.DiffResult<T>,\n    ) => {\n      // we're going to take a look at the data, so the query is no longer invalidated\n      this.invalidate(queryId, false);\n\n      // The query store value can be undefined in the event of a store\n      // reset.\n      if (!queryStoreValue) return;\n\n      const { observableQuery, document } = this.getQuery(queryId);\n\n      const fetchPolicy = observableQuery\n        ? observableQuery.options.fetchPolicy\n        : options.fetchPolicy;\n\n      // don't watch the store for queries on standby\n      if (fetchPolicy === 'standby') return;\n\n      const loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n      const lastResult = observableQuery && observableQuery.getLastResult();\n\n      const networkStatusChanged = !!(\n        lastResult &&\n        lastResult.networkStatus !== queryStoreValue.networkStatus\n      );\n\n      const shouldNotifyIfLoading =\n        options.returnPartialData ||\n        (!newData && queryStoreValue.previousVariables) ||\n        (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n        fetchPolicy === 'cache-only' ||\n        fetchPolicy === 'cache-and-network';\n\n      if (loading && !shouldNotifyIfLoading) {\n        return;\n      }\n\n      const hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n\n      const errorPolicy: ErrorPolicy = observableQuery\n        && observableQuery.options.errorPolicy\n        || options.errorPolicy\n        || 'none';\n\n      // If we have either a GraphQL error or a network error, we create\n      // an error and tell the observer about it.\n      if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n        return invoke('error', new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError,\n        }));\n      }\n\n      try {\n        let data: any;\n        let isMissing: boolean;\n\n        if (newData) {\n          // As long as we're using the cache, clear out the latest\n          // `newData`, since it will now become the current data. We need\n          // to keep the `newData` stored with the query when using\n          // `no-cache` since `getCurrentQueryResult` attemps to pull from\n          // `newData` first, following by trying the cache (which won't\n          // find a hit for `no-cache`).\n          if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n            this.setQuery(queryId, () => ({ newData: null }));\n          }\n\n          data = newData.result;\n          isMissing = !newData.complete;\n        } else {\n          const lastError = observableQuery && observableQuery.getLastError();\n          const errorStatusChanged =\n            errorPolicy !== 'none' &&\n            (lastError && lastError.graphQLErrors) !==\n              queryStoreValue.graphQLErrors;\n\n          if (lastResult && lastResult.data && !errorStatusChanged) {\n            data = lastResult.data;\n            isMissing = false;\n          } else {\n            const diffResult = this.dataStore.getCache().diff({\n              query: document as DocumentNode,\n              variables:\n                queryStoreValue.previousVariables ||\n                queryStoreValue.variables,\n              returnPartialData: true,\n              optimistic: true,\n            });\n\n            data = diffResult.result;\n            isMissing = !diffResult.complete;\n          }\n        }\n\n        // If there is some data missing and the user has told us that they\n        // do not tolerate partial data then we want to return the previous\n        // result and mark it as stale.\n        const stale = isMissing && !(\n          options.returnPartialData ||\n          fetchPolicy === 'cache-only'\n        );\n\n        const resultFromStore: ApolloQueryResult<T> = {\n          data: stale ? lastResult && lastResult.data : data,\n          loading,\n          networkStatus: queryStoreValue.networkStatus,\n          stale,\n        };\n\n        // if the query wants updates on errors we need to add it to the result\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          resultFromStore.errors = queryStoreValue.graphQLErrors;\n        }\n\n        invoke('next', resultFromStore);\n\n      } catch (networkError) {\n        invoke('error', new ApolloError({ networkError }));\n      }\n    };\n  }\n\n  private transformCache = new (canUseWeakMap ? WeakMap : Map)<\n    DocumentNode,\n    Readonly<{\n      document: Readonly<DocumentNode>;\n      hasClientExports: boolean;\n      hasForcedResolvers: boolean;\n      clientQuery: Readonly<DocumentNode> | null;\n      serverQuery: Readonly<DocumentNode> | null;\n      defaultVars: Readonly<OperationVariables>;\n    }>\n  >();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cache = this.dataStore.getCache();\n      const transformed = cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = this.localState.serverQuery(forLink);\n\n      const cacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables(\n    document: DocumentNode,\n    variables?: OperationVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called\n  // directly (i.e. through ApolloClient) or through the query method within QueryManager.\n  // Currently, the query method uses watchQuery in order to handle non-network errors correctly\n  // but we don't want to keep track observables issued for the query method since those aren't\n  // supposed to be refetched in the event of a store reset. Once we unify error handling for\n  // network errors and non-network errors, the shouldSubscribe option will go away.\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions,\n    shouldSubscribe = true,\n  ): ObservableQuery<T, TVariables> {\n    invariant(\n      options.fetchPolicy !== 'standby',\n      'client.watchQuery cannot be called with fetchPolicy set to \"standby\"',\n    );\n\n    // assign variable default values if supplied\n    options.variables = this.getVariables(options.query, options.variables);\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    let transformedOptions = { ...options } as WatchQueryOptions<TVariables>;\n\n    return new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe,\n    });\n  }\n\n  public query<T>(options: QueryOptions): Promise<ApolloQueryResult<T>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const watchedQuery = this.watchQuery<T>(options, false);\n      this.fetchQueryRejectFns.set(`query:${watchedQuery.queryId}`, reject);\n      watchedQuery\n        .result()\n        .then(resolve, reject)\n        // Since neither resolve nor reject throw or return a value, this .then\n        // handler is guaranteed to execute. Note that it doesn't really matter\n        // when we remove the reject function from this.fetchQueryRejectFns,\n        // since resolve and reject are mutually idempotent. In fact, it would\n        // not be incorrect to let reject functions accumulate over time; it's\n        // just a waste of memory.\n        .then(() =>\n          this.fetchQueryRejectFns.delete(`query:${watchedQuery.queryId}`),\n        );\n    });\n  }\n\n  public generateQueryId() {\n    return String(this.idCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(queryId);\n  }\n\n  public addQueryListener(queryId: string, listener: QueryListener) {\n    this.setQuery(queryId, ({ listeners }) => {\n      listeners.add(listener);\n      return { invalidated: false };\n    });\n  }\n\n  public updateQueryWatch(\n    queryId: string,\n    document: DocumentNode,\n    options: WatchQueryOptions,\n  ) {\n    const { cancel } = this.getQuery(queryId);\n    if (cancel) cancel();\n    const previousResult = () => {\n      let previousResult = null;\n      const { observableQuery } = this.getQuery(queryId);\n      if (observableQuery) {\n        const lastResult = observableQuery.getLastResult();\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n    return this.dataStore.getCache().watch({\n      query: document as DocumentNode,\n      variables: options.variables,\n      optimistic: true,\n      previousResult,\n      callback: newData => {\n        this.setQuery(queryId, () => ({ invalidated: true, newData }));\n      },\n    });\n  }\n\n  // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.\n  public addObservableQuery<T>(\n    queryId: string,\n    observableQuery: ObservableQuery<T>,\n  ) {\n    this.setQuery(queryId, () => ({ observableQuery }));\n  }\n\n  public removeObservableQuery(queryId: string) {\n    const { cancel } = this.getQuery(queryId);\n    this.setQuery(queryId, () => ({ observableQuery: null }));\n    if (cancel) cancel();\n  }\n\n  public clearStore(): Promise<void> {\n    // Before we have sent the reset action to the store,\n    // we can no longer rely on the results returned by in-flight\n    // requests since these may depend on values that previously existed\n    // in the data portion of the store. So, we cancel the promises and observers\n    // that we have issued so far and not yet resolved (in the case of\n    // queries).\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(new InvariantError(\n        'Store reset while query was in flight (not completed in link chain)',\n      ));\n    });\n\n    const resetIds: string[] = [];\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) resetIds.push(queryId);\n    });\n\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n\n    // begin removing data from the store\n    return this.dataStore.reset();\n  }\n\n  public resetStore(): Promise<ApolloQueryResult<any>[]> {\n    // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n    return this.clearStore().then(() => {\n      return this.reFetchObservableQueries();\n    });\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) {\n        const fetchPolicy = observableQuery.options.fetchPolicy;\n\n        observableQuery.resetLastResults();\n        if (\n          fetchPolicy !== 'cache-only' &&\n          (includeStandby || fetchPolicy !== 'standby')\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        this.setQuery(queryId, () => ({ newData: null }));\n        this.invalidate(queryId);\n      }\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public observeQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ) {\n    this.addQueryListener(\n      queryId,\n      this.queryListenerForObserver(queryId, options, observer),\n    );\n    return this.fetchQuery<T>(queryId, options);\n  }\n\n  public startQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    listener: QueryListener,\n  ) {\n    invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n\n    this.addQueryListener(queryId, listener);\n\n    this.fetchQuery<T>(queryId, options)\n      // `fetchQuery` returns a Promise. In case of a failure it should be caucht or else the\n      // console will show an `Uncaught (in promise)` message. Ignore the error for now.\n      .catch(() => undefined);\n\n    return queryId;\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    variables,\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        {},\n        variables,\n        false,\n      ).map(result => {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          this.dataStore.markSubscriptionResult(\n            result,\n            query,\n            variables,\n          );\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: Subscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchQueryRejectFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchQueryRejectFns.delete(`query:${queryId}`);\n    this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n    this.getQuery(queryId).subscriptions.forEach(x => x.unsubscribe());\n    this.queries.delete(queryId);\n  }\n\n  public getCurrentQueryResult<T>(\n    observableQuery: ObservableQuery<T>,\n    optimistic: boolean = true,\n  ): {\n    data: T | undefined;\n    partial: boolean;\n  } {\n    const { variables, query, fetchPolicy, returnPartialData } = observableQuery.options;\n    const lastResult = observableQuery.getLastResult();\n    const { newData } = this.getQuery(observableQuery.queryId);\n\n    if (newData && newData.complete) {\n      return { data: newData.result, partial: false };\n    }\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return { data: undefined, partial: false };\n    }\n\n    const { result, complete } = this.dataStore.getCache().diff<T>({\n      query,\n      variables,\n      previousResult: lastResult ? lastResult.data : undefined,\n      returnPartialData: true,\n      optimistic,\n    });\n\n    return {\n      data: (complete || returnPartialData) ? result : void 0,\n      partial: !complete,\n    };\n  }\n\n  public getQueryWithPreviousResult<TData, TVariables = OperationVariables>(\n    queryIdOrObservable: string | ObservableQuery<TData, TVariables>,\n  ): {\n    previousResult: any;\n    variables: TVariables | undefined;\n    document: DocumentNode;\n  } {\n    let observableQuery: ObservableQuery<TData, any>;\n    if (typeof queryIdOrObservable === 'string') {\n      const { observableQuery: foundObserveableQuery } = this.getQuery(\n        queryIdOrObservable,\n      );\n      invariant(\n        foundObserveableQuery,\n        `ObservableQuery with this id doesn't exist: ${queryIdOrObservable}`\n      );\n      observableQuery = foundObserveableQuery!;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    const { variables, query } = observableQuery.options;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables,\n      document: query,\n    };\n  }\n\n  public broadcastQueries() {\n    this.onBroadcast();\n    this.queries.forEach((info, id) => {\n      if (info.invalidated) {\n        info.listeners.forEach(listener => {\n          // it's possible for the listener to be undefined if the query is being stopped\n          // See here for more detail: https://github.com/apollostack/apollo-client/issues/231\n          if (listener) {\n            listener(this.queryStore.get(id), info.newData);\n          }\n        });\n      }\n    });\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean = this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = JSON.stringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          byVariables.set(\n            varJson,\n            observable = multiplex(\n              execute(link, operation) as Observable<FetchResult<T>>\n            )\n          );\n\n          const cleanup = () => {\n            byVariables.delete(varJson);\n            if (!byVariables.size) inFlightLinkObservables.delete(serverQuery);\n            cleanupSub.unsubscribe();\n          };\n\n          const cleanupSub = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup,\n          });\n        }\n\n      } else {\n        observable = multiplex(execute(link, operation) as Observable<FetchResult<T>>);\n      }\n    } else {\n      observable = Observable.of({ data: {} } as FetchResult<T>);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  // Takes a request id, query id, a query document and information associated with the query\n  // and send it to the network interface. Returns\n  // a promise for the result associated with that request.\n  private fetchRequest<T>({\n    requestId,\n    queryId,\n    document,\n    options,\n    fetchMoreForQueryId,\n  }: {\n    requestId: number;\n    queryId: string;\n    document: DocumentNode;\n    options: WatchQueryOptions;\n    fetchMoreForQueryId?: string;\n  }): Promise<FetchResult<T>> {\n    const { variables, errorPolicy = 'none', fetchPolicy } = options;\n    let resultFromStore: any;\n    let errorsFromStore: any;\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const observable = this.getObservableFromLink(\n        document,\n        options.context,\n        variables,\n      );\n\n      const fqrfId = `fetchRequest:${queryId}`;\n      this.fetchQueryRejectFns.set(fqrfId, reject);\n\n      const cleanup = () => {\n        this.fetchQueryRejectFns.delete(fqrfId);\n        this.setQuery(queryId, ({ subscriptions }) => {\n          subscriptions.delete(subscription);\n        });\n      };\n\n      const subscription = observable.map((result: FetchResult<T>) => {\n        if (requestId >= this.getQuery(queryId).lastRequestId) {\n          this.markQueryResult(\n            queryId,\n            result,\n            options,\n            fetchMoreForQueryId,\n          );\n\n          this.queryStore.markQueryResult(\n            queryId,\n            result,\n            fetchMoreForQueryId,\n          );\n\n          this.invalidate(queryId);\n          this.invalidate(fetchMoreForQueryId);\n\n          this.broadcastQueries();\n        }\n\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors,\n          }));\n        }\n\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          // We don't write fetchMore results to the store because this would overwrite\n          // the original result in case an @connection directive is used.\n          resultFromStore = result.data;\n        } else {\n          // ensure result is combined with data already in store\n          const { result, complete } = this.dataStore.getCache().diff<T>({\n            variables,\n            query: document,\n            optimistic: false,\n            returnPartialData: true,\n          });\n\n          if (complete || options.returnPartialData) {\n            resultFromStore = result;\n          }\n        }\n      }).subscribe({\n        error(error: ApolloError) {\n          cleanup();\n          reject(error);\n        },\n\n        complete() {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false,\n          });\n        },\n      });\n\n      this.setQuery(queryId, ({ subscriptions }) => {\n        subscriptions.add(subscription);\n      });\n    });\n  }\n\n  private getQuery(queryId: string) {\n    return (\n      this.queries.get(queryId) || {\n        listeners: new Set<QueryListener>(),\n        invalidated: false,\n        document: null,\n        newData: null,\n        lastRequestId: 1,\n        observableQuery: null,\n        subscriptions: new Set<Subscription>(),\n      }\n    );\n  }\n\n  private setQuery<T extends keyof QueryInfo>(\n    queryId: string,\n    updater: (prev: QueryInfo) => Pick<QueryInfo, T> | void,\n  ) {\n    const prev = this.getQuery(queryId);\n    const newInfo = { ...prev, ...updater(prev) };\n    this.queries.set(queryId, newInfo);\n  }\n\n  private invalidate(\n    queryId: string | undefined,\n    invalidated = true,\n  ) {\n    if (queryId) {\n      this.setQuery(queryId, () => ({ invalidated }));\n    }\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n\n  public checkInFlight(queryId: string) {\n    const query = this.queryStore.get(queryId);\n\n    return (\n      query &&\n      query.networkStatus !== NetworkStatus.ready &&\n      query.networkStatus !== NetworkStatus.error\n    );\n  }\n\n  // Map from client ID to { interval, options }.\n  private pollingInfoByQueryId = new Map<string, {\n    interval: number;\n    timeout: NodeJS.Timeout;\n    options: WatchQueryOptions;\n  }>();\n\n  public startPollingQuery(\n    options: WatchQueryOptions,\n    queryId: string,\n    listener?: QueryListener,\n  ): string {\n    const { pollInterval } = options;\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    // Do not poll in SSR mode\n    if (!this.ssrMode) {\n      let info = this.pollingInfoByQueryId.get(queryId)!;\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, (info = {} as any));\n      }\n\n      info.interval = pollInterval!;\n      info.options = {\n        ...options,\n        fetchPolicy: 'network-only',\n      };\n\n      const maybeFetch = () => {\n        const info = this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          if (this.checkInFlight(queryId)) {\n            poll();\n          } else {\n            this.fetchQuery(queryId, info.options, FetchType.poll).then(\n              poll,\n              poll,\n            );\n          }\n        }\n      };\n\n      const poll = () => {\n        const info = this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch, info.interval);\n        }\n      };\n\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n\n      poll();\n    }\n\n    return queryId;\n  }\n\n  public stopPollingQuery(queryId: string) {\n    this.pollingInfoByQueryId.delete(queryId);\n  }\n}\n", "import { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, Cache, DataProxy } from 'apollo-cache';\n\nimport { QueryStoreValue } from '../data/queries';\nimport {\n  getOperationName,\n  tryFunctionOrLogError,\n  graphQLResultHasError,\n} from 'apollo-utilities';\nimport { MutationQueryReducer } from '../core/types';\n\nexport type QueryWithUpdater = {\n  updater: MutationQueryReducer<Object>;\n  query: QueryStoreValue;\n};\n\nexport interface DataWrite {\n  rootId: string;\n  result: any;\n  document: DocumentNode;\n  operationName: string | null;\n  variables: Object;\n}\n\nexport class DataStore<TSerialized> {\n  private cache: ApolloCache<TSerialized>;\n\n  constructor(initialCache: ApolloCache<TSerialized>) {\n    this.cache = initialCache;\n  }\n\n  public getCache(): ApolloCache<TSerialized> {\n    return this.cache;\n  }\n\n  public markQueryResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n    fetchMoreForQueryId: string | undefined,\n    ignoreErrors: boolean = false,\n  ) {\n    let writeWithErrors = !graphQLResultHasError(result);\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markSubscriptionResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n  ) {\n    // the subscription interface should handle not sending us results we no longer subscribe to.\n    // XXX I don't think we ever send in an object with errors, but we might in the future...\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markMutationInit(mutation: {\n    mutationId: string;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n    optimisticResponse: Object | Function | undefined;\n  }) {\n    if (mutation.optimisticResponse) {\n      let optimistic: Object;\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic = mutation.optimisticResponse;\n      }\n\n      this.cache.recordOptimisticTransaction(c => {\n        const orig = this.cache;\n        this.cache = c;\n\n        try {\n          this.markMutationResult({\n            mutationId: mutation.mutationId,\n            result: { data: optimistic },\n            document: mutation.document,\n            variables: mutation.variables,\n            updateQueries: mutation.updateQueries,\n            update: mutation.update,\n          });\n        } finally {\n          this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  }\n\n  public markMutationResult(mutation: {\n    mutationId: string;\n    result: ExecutionResult;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n  }) {\n    // Incorporate the result from this mutation into the store\n    if (!graphQLResultHasError(mutation.result)) {\n      const cacheWrites: Cache.WriteOptions[] = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      }];\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        Object.keys(updateQueries).forEach(id => {\n          const { query, updater } = updateQueries[id];\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = tryFunctionOrLogError(() =>\n              updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables,\n              }),\n            );\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables,\n              });\n            }\n          }\n        });\n      }\n\n      this.cache.performTransaction(c => {\n        cacheWrites.forEach(write => c.write(write));\n\n        // If the mutation has some writes associated with it then we need to\n        // apply those writes to the store by running this reducer again with a\n        // write action.\n        const { update } = mutation;\n        if (update) {\n          tryFunctionOrLogError(() => update(c, mutation.result));\n        }\n      });\n    }\n  }\n\n  public markMutationComplete({\n    mutationId,\n    optimisticResponse,\n  }: {\n    mutationId: string;\n    optimisticResponse?: any;\n  }) {\n    if (optimisticResponse) {\n      this.cache.removeOptimistic(mutationId);\n    }\n  }\n\n  public markUpdateQueryResult(\n    document: DocumentNode,\n    variables: any,\n    newResult: any,\n  ) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables,\n      query: document,\n    });\n  }\n\n  public reset(): Promise<void> {\n    return this.cache.reset();\n  }\n}\n", "export const version = \"2.6.10\"", "import {\n  ApolloLink,\n  FetchResult,\n  GraphQLRequest,\n  execute,\n} from 'apollo-link';\nimport { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, DataProxy } from 'apollo-cache';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { QueryManager } from './core/QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  Resolvers,\n} from './core/types';\nimport { ObservableQuery } from './core/ObservableQuery';\nimport { LocalState, FragmentMatcher } from './core/LocalState';\nimport { Observable } from './util/Observable';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n} from './core/watchQueryOptions';\n\nimport { DataStore } from './data/store';\n\nimport { version } from './version';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions>;\n  query?: Partial<QueryOptions>;\n  mutate?: Partial<MutationOptions>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport default class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public store: DataStore<TCacheShape>;\n  public cache: ApolloCache<TCacheShape>;\n  public readonly queryManager: QueryManager<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations. Passing\n   *                               `{ freezeResults: true }` to the `InMemoryCache` constructor\n   *                               can help enforce this immutability.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    // If a link hasn't been defined, but local state resolvers have been set,\n    // setup a default empty link.\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n\n    if (!link || !cache) {\n      throw new InvariantError(\n        \"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n        \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n        \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\"\n      );\n    }\n\n    // remove apollo-client supported directives\n    this.link = link;\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    // Attach the client instance to window to let us be found by chrome devtools, but only in\n    // development mode\n    const defaultConnectToDevTools =\n      process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      !(window as any).__APOLLO_CLIENT__;\n\n    if (\n      typeof connectToDevTools === 'undefined'\n        ? defaultConnectToDevTools\n        : connectToDevTools && typeof window !== 'undefined'\n    ) {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self\n      ) {\n        // First check if devtools is not installed\n        if (\n          typeof (window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined'\n        ) {\n          // Only for Chrome\n          if (\n            window.navigator &&\n            window.navigator.userAgent &&\n            window.navigator.userAgent.indexOf('Chrome') > -1\n          ) {\n            // tslint:disable-next-line\n            console.debug(\n              'Download the Apollo DevTools ' +\n                'for a better development experience: ' +\n                'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm',\n            );\n          }\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.queryStore.getStore(),\n              mutations: this.queryManager.mutationStore.getStore(),\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      },\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = {\n        ...this.defaultOptions.watchQuery,\n        ...options,\n      } as WatchQueryOptions<TVariables>;\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = { ...this.defaultOptions.query, ...options } as QueryOptions<\n        TVariables\n      >;\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<T = any, TVariables = OperationVariables>(\n    options: MutationOptions<T, TVariables>,\n  ): Promise<FetchResult<T>> {\n    if (this.defaultOptions.mutate) {\n      options = {\n        ...this.defaultOptions.mutate,\n        ...options,\n      } as MutationOptions<T, TVariables>;\n    }\n\n    return this.queryManager.mutate<T>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    const result = this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    const result = this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Sugar for writeQuery & writeFragment\n   * This method will construct a query from the data object passed in.\n   * If no id is supplied, writeData will write the data to the root.\n   * If an id is supplied, writeData will write a fragment to the object\n   * specified by the id in the store.\n   *\n   * Since you aren't passing in a query to check the shape of the data,\n   * you must pass in an object that conforms to the shape of valid GraphQL data.\n   */\n  public writeData<TData = any>(\n    options: DataProxy.WriteDataOptions<TData>,\n  ): void {\n    const result = this.cache.writeData<TData>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * This initializes the query manager that tracks queries and the cache\n   */\n  public initQueryManager(): QueryManager<TCacheShape> {\n    invariant.warn(\n      'Calling the initQueryManager method is no longer necessary, ' +\n        'and it will be removed from ApolloClient in version 3.0.',\n    );\n    return this.queryManager;\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You\u2019ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n}\n"],
  "mappings": "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",
  "names": ["d", "b", "tslib_1.__extends", "InvariantError", "invariant", "_a", "Observable", "Subscription", "SubscriptionObserver", "concat", "value", "from", "module", "zenObservable", "__extends", "extendStatics", "init_tslib_es6", "d", "b", "__assign", "root", "result", "inspect", "__assign", "init_tslib_es6", "module", "stringify", "_a", "stringify", "__assign", "toString", "result", "hasOwnProperty", "_a", "tslib_1.__extends", "LinkError", "ApolloLink", "__extends", "extendStatics", "result", "__assign", "init_tslib_es6", "d", "b", "root", "result", "Symbol", "Observable", "result", "hasOwnProperty", "NetworkStatus", "__extends", "LinkObservable", "ApolloError", "_a", "FetchType", "ObservableQuery", "__assign", "variables", "MutationStore", "QueryStore", "LocalState", "execute", "QueryManager", "self", "previousResult", "info", "DataStore", "ApolloClient"]
}
